// This file is @generated by prost-build.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByYearCardNumberTransactionRequest {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearTransactionStatus {
    #[prost(int32, tag = "1")]
    pub year: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindMonthlyTransactionStatus {
    #[prost(int32, tag = "1")]
    pub year: i32,
    #[prost(int32, tag = "2")]
    pub month: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearTransactionStatusCardNumber {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindMonthlyTransactionStatusCardNumber {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
    #[prost(int32, tag = "3")]
    pub month: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllTransactionRequest {
    #[prost(int32, tag = "1")]
    pub page: i32,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub search: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllTransactionCardNumberRequest {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page: i32,
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    #[prost(string, tag = "4")]
    pub search: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByIdTransactionRequest {
    #[prost(int32, tag = "1")]
    pub transaction_id: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByCardNumberTransactionRequest {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindTransactionByMerchantIdRequest {
    #[prost(int32, tag = "1")]
    pub merchant_id: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateTransactionRequest {
    #[prost(string, tag = "1")]
    pub api_key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub amount: i64,
    #[prost(string, tag = "4")]
    pub payment_method: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub merchant_id: i32,
    #[prost(message, optional, tag = "6")]
    pub transaction_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpdateTransactionRequest {
    #[prost(int32, tag = "1")]
    pub transaction_id: i32,
    #[prost(string, tag = "2")]
    pub api_key: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub amount: i32,
    #[prost(string, tag = "5")]
    pub payment_method: ::prost::alloc::string::String,
    #[prost(int32, tag = "6")]
    pub merchant_id: i32,
    #[prost(message, optional, tag = "7")]
    pub transaction_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionResponse {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub transaction_no: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub amount: i64,
    #[prost(string, tag = "5")]
    pub payment_method: ::prost::alloc::string::String,
    #[prost(int32, tag = "6")]
    pub merchant_id: i32,
    #[prost(string, tag = "7")]
    pub transaction_time: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub updated_at: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionResponseDeleteAt {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub transaction_no: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub amount: i64,
    #[prost(string, tag = "5")]
    pub payment_method: ::prost::alloc::string::String,
    #[prost(int32, tag = "6")]
    pub merchant_id: i32,
    #[prost(string, tag = "7")]
    pub transaction_time: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionMonthStatusSuccessResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub month: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_success: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionYearStatusSuccessResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_success: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionMonthStatusFailedResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub month: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_failed: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionYearStatusFailedResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_failed: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionMonthMethodResponse {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub payment_method: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_transactions: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionYearMethodResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub payment_method: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_transactions: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionMonthAmountResponse {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransactionYearlyAmountResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransactionMonthStatusSuccess {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionMonthStatusSuccessResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransactionYearStatusSuccess {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionYearStatusSuccessResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransactionMonthStatusFailed {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionMonthStatusFailedResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransactionYearStatusFailed {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionYearStatusFailedResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransactionMonthMethod {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionMonthMethodResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransactionYearMethod {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionYearMethodResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransactionMonthAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionMonthAmountResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransactionYearAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionYearlyAmountResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTransaction {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<TransactionResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransactions {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTransactionDelete {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTransactionAll {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationTransaction {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionResponse>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationTransactionDeleteAt {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransactionResponseDeleteAt>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
/// Generated client implementations.
pub mod transaction_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct TransactionServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TransactionServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TransactionServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TransactionServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TransactionServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn find_all_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransaction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindAllTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindAllTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_all_transaction_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTransactionCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransaction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindAllTransactionByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindAllTransactionByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_id_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransaction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindByIdTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindByIdTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transaction_status_success(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindMonthlyTransactionStatusSuccess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindMonthlyTransactionStatusSuccess",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transaction_status_success(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindYearlyTransactionStatusSuccess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindYearlyTransactionStatusSuccess",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transaction_status_failed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindMonthlyTransactionStatusFailed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindMonthlyTransactionStatusFailed",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transaction_status_failed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindYearlyTransactionStatusFailed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindYearlyTransactionStatusFailed",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transaction_status_success_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::FindMonthlyTransactionStatusCardNumber,
            >,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindMonthlyTransactionStatusSuccessByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindMonthlyTransactionStatusSuccessByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transaction_status_success_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransactionStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindYearlyTransactionStatusSuccessByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindYearlyTransactionStatusSuccessByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transaction_status_failed_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::FindMonthlyTransactionStatusCardNumber,
            >,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindMonthlyTransactionStatusFailedByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindMonthlyTransactionStatusFailedByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transaction_status_failed_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransactionStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindYearlyTransactionStatusFailedByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindYearlyTransactionStatusFailedByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_payment_methods(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindMonthlyPaymentMethods",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindMonthlyPaymentMethods",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_payment_methods(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindYearlyPaymentMethods",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindYearlyPaymentMethods",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_amounts(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindMonthlyAmounts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindMonthlyAmounts",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_amounts(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindYearlyAmounts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindYearlyAmounts",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_payment_methods_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::FindByYearCardNumberTransactionRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindMonthlyPaymentMethodsByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindMonthlyPaymentMethodsByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_payment_methods_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::FindByYearCardNumberTransactionRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindYearlyPaymentMethodsByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindYearlyPaymentMethodsByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_amounts_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::FindByYearCardNumberTransactionRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindMonthlyAmountsByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindMonthlyAmountsByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_amounts_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::FindByYearCardNumberTransactionRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindYearlyAmountsByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindYearlyAmountsByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_transaction_by_merchant_id(
            &mut self,
            request: impl tonic::IntoRequest<super::FindTransactionByMerchantIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactions>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindTransactionByMerchantId",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindTransactionByMerchantId",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_active_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransactionDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindByActiveTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindByActiveTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_trashed_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransactionDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/FindByTrashedTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "FindByTrashedTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransaction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/CreateTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "CreateTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransaction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/UpdateTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "UpdateTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn trashed_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransaction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/TrashedTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "TrashedTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransaction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/RestoreTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "RestoreTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_transaction_permanent(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionDelete>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/DeleteTransactionPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "DeleteTransactionPermanent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_all_transaction(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/RestoreAllTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "RestoreAllTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_all_transaction_permanent(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transaction.TransactionService/DeleteAllTransactionPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transaction.TransactionService",
                        "DeleteAllTransactionPermanent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod transaction_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TransactionServiceServer.
    #[async_trait]
    pub trait TransactionService: std::marker::Send + std::marker::Sync + 'static {
        async fn find_all_transaction(
            &self,
            request: tonic::Request<super::FindAllTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransaction>,
            tonic::Status,
        >;
        async fn find_all_transaction_by_card_number(
            &self,
            request: tonic::Request<super::FindAllTransactionCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransaction>,
            tonic::Status,
        >;
        async fn find_by_id_transaction(
            &self,
            request: tonic::Request<super::FindByIdTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransaction>,
            tonic::Status,
        >;
        async fn find_monthly_transaction_status_success(
            &self,
            request: tonic::Request<super::FindMonthlyTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthStatusSuccess>,
            tonic::Status,
        >;
        async fn find_yearly_transaction_status_success(
            &self,
            request: tonic::Request<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearStatusSuccess>,
            tonic::Status,
        >;
        async fn find_monthly_transaction_status_failed(
            &self,
            request: tonic::Request<super::FindMonthlyTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthStatusFailed>,
            tonic::Status,
        >;
        async fn find_yearly_transaction_status_failed(
            &self,
            request: tonic::Request<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearStatusFailed>,
            tonic::Status,
        >;
        async fn find_monthly_transaction_status_success_by_card_number(
            &self,
            request: tonic::Request<super::FindMonthlyTransactionStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthStatusSuccess>,
            tonic::Status,
        >;
        async fn find_yearly_transaction_status_success_by_card_number(
            &self,
            request: tonic::Request<super::FindYearTransactionStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearStatusSuccess>,
            tonic::Status,
        >;
        async fn find_monthly_transaction_status_failed_by_card_number(
            &self,
            request: tonic::Request<super::FindMonthlyTransactionStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthStatusFailed>,
            tonic::Status,
        >;
        async fn find_yearly_transaction_status_failed_by_card_number(
            &self,
            request: tonic::Request<super::FindYearTransactionStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearStatusFailed>,
            tonic::Status,
        >;
        async fn find_monthly_payment_methods(
            &self,
            request: tonic::Request<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthMethod>,
            tonic::Status,
        >;
        async fn find_yearly_payment_methods(
            &self,
            request: tonic::Request<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearMethod>,
            tonic::Status,
        >;
        async fn find_monthly_amounts(
            &self,
            request: tonic::Request<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthAmount>,
            tonic::Status,
        >;
        async fn find_yearly_amounts(
            &self,
            request: tonic::Request<super::FindYearTransactionStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearAmount>,
            tonic::Status,
        >;
        async fn find_monthly_payment_methods_by_card_number(
            &self,
            request: tonic::Request<super::FindByYearCardNumberTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthMethod>,
            tonic::Status,
        >;
        async fn find_yearly_payment_methods_by_card_number(
            &self,
            request: tonic::Request<super::FindByYearCardNumberTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearMethod>,
            tonic::Status,
        >;
        async fn find_monthly_amounts_by_card_number(
            &self,
            request: tonic::Request<super::FindByYearCardNumberTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionMonthAmount>,
            tonic::Status,
        >;
        async fn find_yearly_amounts_by_card_number(
            &self,
            request: tonic::Request<super::FindByYearCardNumberTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionYearAmount>,
            tonic::Status,
        >;
        async fn find_transaction_by_merchant_id(
            &self,
            request: tonic::Request<super::FindTransactionByMerchantIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactions>,
            tonic::Status,
        >;
        async fn find_by_active_transaction(
            &self,
            request: tonic::Request<super::FindAllTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransactionDeleteAt>,
            tonic::Status,
        >;
        async fn find_by_trashed_transaction(
            &self,
            request: tonic::Request<super::FindAllTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransactionDeleteAt>,
            tonic::Status,
        >;
        async fn create_transaction(
            &self,
            request: tonic::Request<super::CreateTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransaction>,
            tonic::Status,
        >;
        async fn update_transaction(
            &self,
            request: tonic::Request<super::UpdateTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransaction>,
            tonic::Status,
        >;
        async fn trashed_transaction(
            &self,
            request: tonic::Request<super::FindByIdTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransaction>,
            tonic::Status,
        >;
        async fn restore_transaction(
            &self,
            request: tonic::Request<super::FindByIdTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransaction>,
            tonic::Status,
        >;
        async fn delete_transaction_permanent(
            &self,
            request: tonic::Request<super::FindByIdTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionDelete>,
            tonic::Status,
        >;
        async fn restore_all_transaction(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionAll>,
            tonic::Status,
        >;
        async fn delete_all_transaction_permanent(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransactionAll>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct TransactionServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> TransactionServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TransactionServiceServer<T>
    where
        T: TransactionService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/transaction.TransactionService/FindAllTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllTransactionSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindAllTransactionRequest>
                    for FindAllTransactionSvc<T> {
                        type Response = super::ApiResponsePaginationTransaction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_all_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllTransactionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindAllTransactionByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllTransactionByCardNumberSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<
                        super::FindAllTransactionCardNumberRequest,
                    > for FindAllTransactionByCardNumberSvc<T> {
                        type Response = super::ApiResponsePaginationTransaction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindAllTransactionCardNumberRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_all_transaction_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllTransactionByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindByIdTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct FindByIdTransactionSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindByIdTransactionRequest>
                    for FindByIdTransactionSvc<T> {
                        type Response = super::ApiResponseTransaction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_by_id_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByIdTransactionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindMonthlyTransactionStatusSuccess" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransactionStatusSuccessSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindMonthlyTransactionStatus>
                    for FindMonthlyTransactionStatusSuccessSvc<T> {
                        type Response = super::ApiResponseTransactionMonthStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindMonthlyTransactionStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_monthly_transaction_status_success(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransactionStatusSuccessSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindYearlyTransactionStatusSuccess" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransactionStatusSuccessSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindYearTransactionStatus>
                    for FindYearlyTransactionStatusSuccessSvc<T> {
                        type Response = super::ApiResponseTransactionYearStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTransactionStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_yearly_transaction_status_success(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransactionStatusSuccessSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindMonthlyTransactionStatusFailed" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransactionStatusFailedSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindMonthlyTransactionStatus>
                    for FindMonthlyTransactionStatusFailedSvc<T> {
                        type Response = super::ApiResponseTransactionMonthStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindMonthlyTransactionStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_monthly_transaction_status_failed(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransactionStatusFailedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindYearlyTransactionStatusFailed" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransactionStatusFailedSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindYearTransactionStatus>
                    for FindYearlyTransactionStatusFailedSvc<T> {
                        type Response = super::ApiResponseTransactionYearStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTransactionStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_yearly_transaction_status_failed(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransactionStatusFailedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindMonthlyTransactionStatusSuccessByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransactionStatusSuccessByCardNumberSvc<
                        T: TransactionService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<
                        super::FindMonthlyTransactionStatusCardNumber,
                    > for FindMonthlyTransactionStatusSuccessByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransactionMonthStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindMonthlyTransactionStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_monthly_transaction_status_success_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransactionStatusSuccessByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindYearlyTransactionStatusSuccessByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransactionStatusSuccessByCardNumberSvc<
                        T: TransactionService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<
                        super::FindYearTransactionStatusCardNumber,
                    > for FindYearlyTransactionStatusSuccessByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransactionYearStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindYearTransactionStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_yearly_transaction_status_success_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransactionStatusSuccessByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindMonthlyTransactionStatusFailedByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransactionStatusFailedByCardNumberSvc<
                        T: TransactionService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<
                        super::FindMonthlyTransactionStatusCardNumber,
                    > for FindMonthlyTransactionStatusFailedByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransactionMonthStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindMonthlyTransactionStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_monthly_transaction_status_failed_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransactionStatusFailedByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindYearlyTransactionStatusFailedByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransactionStatusFailedByCardNumberSvc<
                        T: TransactionService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<
                        super::FindYearTransactionStatusCardNumber,
                    > for FindYearlyTransactionStatusFailedByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransactionYearStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindYearTransactionStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_yearly_transaction_status_failed_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransactionStatusFailedByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindMonthlyPaymentMethods" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyPaymentMethodsSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindYearTransactionStatus>
                    for FindMonthlyPaymentMethodsSvc<T> {
                        type Response = super::ApiResponseTransactionMonthMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTransactionStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_monthly_payment_methods(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyPaymentMethodsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindYearlyPaymentMethods" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyPaymentMethodsSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindYearTransactionStatus>
                    for FindYearlyPaymentMethodsSvc<T> {
                        type Response = super::ApiResponseTransactionYearMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTransactionStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_yearly_payment_methods(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyPaymentMethodsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindMonthlyAmounts" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyAmountsSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindYearTransactionStatus>
                    for FindMonthlyAmountsSvc<T> {
                        type Response = super::ApiResponseTransactionMonthAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTransactionStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_monthly_amounts(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyAmountsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindYearlyAmounts" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyAmountsSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindYearTransactionStatus>
                    for FindYearlyAmountsSvc<T> {
                        type Response = super::ApiResponseTransactionYearAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTransactionStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_yearly_amounts(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyAmountsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindMonthlyPaymentMethodsByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyPaymentMethodsByCardNumberSvc<
                        T: TransactionService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<
                        super::FindByYearCardNumberTransactionRequest,
                    > for FindMonthlyPaymentMethodsByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransactionMonthMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindByYearCardNumberTransactionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_monthly_payment_methods_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyPaymentMethodsByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindYearlyPaymentMethodsByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyPaymentMethodsByCardNumberSvc<
                        T: TransactionService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<
                        super::FindByYearCardNumberTransactionRequest,
                    > for FindYearlyPaymentMethodsByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransactionYearMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindByYearCardNumberTransactionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_yearly_payment_methods_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyPaymentMethodsByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindMonthlyAmountsByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyAmountsByCardNumberSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<
                        super::FindByYearCardNumberTransactionRequest,
                    > for FindMonthlyAmountsByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransactionMonthAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindByYearCardNumberTransactionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_monthly_amounts_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyAmountsByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindYearlyAmountsByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyAmountsByCardNumberSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<
                        super::FindByYearCardNumberTransactionRequest,
                    > for FindYearlyAmountsByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransactionYearAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindByYearCardNumberTransactionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_yearly_amounts_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyAmountsByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindTransactionByMerchantId" => {
                    #[allow(non_camel_case_types)]
                    struct FindTransactionByMerchantIdSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<
                        super::FindTransactionByMerchantIdRequest,
                    > for FindTransactionByMerchantIdSvc<T> {
                        type Response = super::ApiResponseTransactions;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindTransactionByMerchantIdRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_transaction_by_merchant_id(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindTransactionByMerchantIdSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindByActiveTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct FindByActiveTransactionSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindAllTransactionRequest>
                    for FindByActiveTransactionSvc<T> {
                        type Response = super::ApiResponsePaginationTransactionDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_by_active_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByActiveTransactionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/FindByTrashedTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct FindByTrashedTransactionSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindAllTransactionRequest>
                    for FindByTrashedTransactionSvc<T> {
                        type Response = super::ApiResponsePaginationTransactionDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::find_by_trashed_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByTrashedTransactionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/CreateTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct CreateTransactionSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::CreateTransactionRequest>
                    for CreateTransactionSvc<T> {
                        type Response = super::ApiResponseTransaction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::create_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateTransactionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/UpdateTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateTransactionSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::UpdateTransactionRequest>
                    for UpdateTransactionSvc<T> {
                        type Response = super::ApiResponseTransaction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::update_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateTransactionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/TrashedTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct TrashedTransactionSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindByIdTransactionRequest>
                    for TrashedTransactionSvc<T> {
                        type Response = super::ApiResponseTransaction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::trashed_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TrashedTransactionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/RestoreTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreTransactionSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindByIdTransactionRequest>
                    for RestoreTransactionSvc<T> {
                        type Response = super::ApiResponseTransaction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::restore_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreTransactionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/DeleteTransactionPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteTransactionPermanentSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::FindByIdTransactionRequest>
                    for DeleteTransactionPermanentSvc<T> {
                        type Response = super::ApiResponseTransactionDelete;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::delete_transaction_permanent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteTransactionPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/RestoreAllTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreAllTransactionSvc<T: TransactionService>(pub Arc<T>);
                    impl<T: TransactionService> tonic::server::UnaryService<()>
                    for RestoreAllTransactionSvc<T> {
                        type Response = super::ApiResponseTransactionAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::restore_all_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreAllTransactionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transaction.TransactionService/DeleteAllTransactionPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteAllTransactionPermanentSvc<T: TransactionService>(
                        pub Arc<T>,
                    );
                    impl<T: TransactionService> tonic::server::UnaryService<()>
                    for DeleteAllTransactionPermanentSvc<T> {
                        type Response = super::ApiResponseTransactionAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::delete_all_transaction_permanent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteAllTransactionPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for TransactionServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "transaction.TransactionService";
    impl<T> tonic::server::NamedService for TransactionServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
