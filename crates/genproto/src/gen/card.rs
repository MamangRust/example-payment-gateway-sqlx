// This file is @generated by prost-build.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllCardRequest {
    #[prost(int32, tag = "1")]
    pub page: i32,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub search: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByIdCardRequest {
    #[prost(int32, tag = "1")]
    pub card_id: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateCardRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(string, tag = "2")]
    pub card_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub expire_date: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "4")]
    pub cvv: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub card_provider: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpdateCardRequest {
    #[prost(int32, tag = "1")]
    pub card_id: i32,
    #[prost(int32, tag = "2")]
    pub user_id: i32,
    #[prost(string, tag = "3")]
    pub card_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub expire_date: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "5")]
    pub cvv: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub card_provider: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CardResponse {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(int32, tag = "2")]
    pub user_id: i32,
    #[prost(string, tag = "3")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub card_type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub expire_date: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub cvv: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub card_provider: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub updated_at: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CardResponseDeleteAt {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(int32, tag = "2")]
    pub user_id: i32,
    #[prost(string, tag = "3")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub card_type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub expire_date: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub cvv: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub card_provider: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CardResponseMonthlyBalance {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_balance: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CardResponseYearlyBalance {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_balance: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CardResponseMonthlyAmount {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CardResponseYearlyAmount {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CardResponseDashboard {
    #[prost(int64, tag = "1")]
    pub total_balance: i64,
    #[prost(int64, tag = "2")]
    pub total_topup: i64,
    #[prost(int64, tag = "3")]
    pub total_withdraw: i64,
    #[prost(int64, tag = "4")]
    pub total_transaction: i64,
    #[prost(int64, tag = "5")]
    pub total_transfer: i64,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CardResponseDashboardCardNumber {
    #[prost(int64, tag = "1")]
    pub total_balance: i64,
    #[prost(int64, tag = "2")]
    pub total_topup: i64,
    #[prost(int64, tag = "3")]
    pub total_withdraw: i64,
    #[prost(int64, tag = "4")]
    pub total_transaction: i64,
    #[prost(int64, tag = "5")]
    pub total_transfer_send: i64,
    #[prost(int64, tag = "6")]
    pub total_transfer_receiver: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseCard {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<CardResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseCardDelete {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseCardAll {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationCard {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<CardResponse>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationCardDeleteAt {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<CardResponseDeleteAt>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseMonthlyBalance {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<CardResponseMonthlyBalance>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseYearlyBalance {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<CardResponseYearlyBalance>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseMonthlyAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<CardResponseMonthlyAmount>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseYearlyAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<CardResponseYearlyAmount>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseDashboardCard {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<CardResponseDashboard>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseDashboardCardNumber {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<CardResponseDashboardCardNumber>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByUserIdCardRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseCards {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<CardResponse>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearBalance {
    #[prost(int32, tag = "1")]
    pub year: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearBalanceCardNumber {
    #[prost(int32, tag = "1")]
    pub year: i32,
    #[prost(string, tag = "2")]
    pub card_number: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearAmount {
    #[prost(int32, tag = "1")]
    pub year: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearAmountCardNumber {
    #[prost(int32, tag = "1")]
    pub year: i32,
    #[prost(string, tag = "2")]
    pub card_number: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByActiveCardRequest {
    #[prost(int32, tag = "1")]
    pub saldo_id: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByTrashedCardRequest {}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByCardNumberRequest {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod card_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct CardServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CardServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CardServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CardServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            CardServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn find_all_card(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationCard>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindAllCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindAllCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_id_card(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCard>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindByIdCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindByIdCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_user_id_card(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByUserIdCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCard>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindByUserIdCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindByUserIdCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_active_card(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationCardDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindByActiveCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindByActiveCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_trashed_card(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationCardDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindByTrashedCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindByTrashedCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCard>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindByCardNumber"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn dashboard_card(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseDashboardCard>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/DashboardCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "DashboardCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn dashboard_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseDashboardCardNumber>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/DashboardCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "DashboardCardNumber"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_balance(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearBalance>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyBalance>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyBalance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindMonthlyBalance"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_balance(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearBalance>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyBalance>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyBalance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindYearlyBalance"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_topup_amount(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyTopupAmount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindMonthlyTopupAmount"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_topup_amount(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyTopupAmount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindYearlyTopupAmount"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_withdraw_amount(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyWithdrawAmount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("card.CardService", "FindMonthlyWithdrawAmount"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_withdraw_amount(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyWithdrawAmount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "FindYearlyWithdrawAmount"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transaction_amount(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyTransactionAmount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("card.CardService", "FindMonthlyTransactionAmount"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transaction_amount(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyTransactionAmount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("card.CardService", "FindYearlyTransactionAmount"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_sender_amount(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyTransferSenderAmount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindMonthlyTransferSenderAmount",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_sender_amount(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyTransferSenderAmount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("card.CardService", "FindYearlyTransferSenderAmount"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_receiver_amount(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyTransferReceiverAmount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindMonthlyTransferReceiverAmount",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_receiver_amount(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyTransferReceiverAmount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindYearlyTransferReceiverAmount",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_balance_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearBalanceCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyBalance>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyBalanceByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("card.CardService", "FindMonthlyBalanceByCardNumber"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_balance_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearBalanceCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyBalance>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyBalanceByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("card.CardService", "FindYearlyBalanceByCardNumber"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_topup_amount_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyTopupAmountByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindMonthlyTopupAmountByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_topup_amount_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyTopupAmountByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindYearlyTopupAmountByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_withdraw_amount_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyWithdrawAmountByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindMonthlyWithdrawAmountByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_withdraw_amount_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyWithdrawAmountByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindYearlyWithdrawAmountByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transaction_amount_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyTransactionAmountByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindMonthlyTransactionAmountByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transaction_amount_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyTransactionAmountByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindYearlyTransactionAmountByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_sender_amount_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyTransferSenderAmountByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindMonthlyTransferSenderAmountByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_sender_amount_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyTransferSenderAmountByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindYearlyTransferSenderAmountByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_receiver_amount_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindMonthlyTransferReceiverAmountByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindMonthlyTransferReceiverAmountByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_receiver_amount_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/FindYearlyTransferReceiverAmountByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "card.CardService",
                        "FindYearlyTransferReceiverAmountByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_card(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCard>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/CreateCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "CreateCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_card(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCard>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/UpdateCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "UpdateCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn trashed_card(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCard>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/TrashedCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "TrashedCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_card(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCard>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/RestoreCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "RestoreCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_card_permanent(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCardDelete>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/DeleteCardPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "DeleteCardPermanent"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_all_card(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCardAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/RestoreAllCard",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "RestoreAllCard"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_all_card_permanent(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCardAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/card.CardService/DeleteAllCardPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("card.CardService", "DeleteAllCardPermanent"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod card_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with CardServiceServer.
    #[async_trait]
    pub trait CardService: std::marker::Send + std::marker::Sync + 'static {
        async fn find_all_card(
            &self,
            request: tonic::Request<super::FindAllCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationCard>,
            tonic::Status,
        >;
        async fn find_by_id_card(
            &self,
            request: tonic::Request<super::FindByIdCardRequest>,
        ) -> std::result::Result<tonic::Response<super::ApiResponseCard>, tonic::Status>;
        async fn find_by_user_id_card(
            &self,
            request: tonic::Request<super::FindByUserIdCardRequest>,
        ) -> std::result::Result<tonic::Response<super::ApiResponseCard>, tonic::Status>;
        async fn find_by_active_card(
            &self,
            request: tonic::Request<super::FindAllCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationCardDeleteAt>,
            tonic::Status,
        >;
        async fn find_by_trashed_card(
            &self,
            request: tonic::Request<super::FindAllCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationCardDeleteAt>,
            tonic::Status,
        >;
        async fn find_by_card_number(
            &self,
            request: tonic::Request<super::FindByCardNumberRequest>,
        ) -> std::result::Result<tonic::Response<super::ApiResponseCard>, tonic::Status>;
        async fn dashboard_card(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseDashboardCard>,
            tonic::Status,
        >;
        async fn dashboard_card_number(
            &self,
            request: tonic::Request<super::FindByCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseDashboardCardNumber>,
            tonic::Status,
        >;
        async fn find_monthly_balance(
            &self,
            request: tonic::Request<super::FindYearBalance>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyBalance>,
            tonic::Status,
        >;
        async fn find_yearly_balance(
            &self,
            request: tonic::Request<super::FindYearBalance>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyBalance>,
            tonic::Status,
        >;
        async fn find_monthly_topup_amount(
            &self,
            request: tonic::Request<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_topup_amount(
            &self,
            request: tonic::Request<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_withdraw_amount(
            &self,
            request: tonic::Request<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_withdraw_amount(
            &self,
            request: tonic::Request<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_transaction_amount(
            &self,
            request: tonic::Request<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_transaction_amount(
            &self,
            request: tonic::Request<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_sender_amount(
            &self,
            request: tonic::Request<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_sender_amount(
            &self,
            request: tonic::Request<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_receiver_amount(
            &self,
            request: tonic::Request<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_receiver_amount(
            &self,
            request: tonic::Request<super::FindYearAmount>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_balance_by_card_number(
            &self,
            request: tonic::Request<super::FindYearBalanceCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyBalance>,
            tonic::Status,
        >;
        async fn find_yearly_balance_by_card_number(
            &self,
            request: tonic::Request<super::FindYearBalanceCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyBalance>,
            tonic::Status,
        >;
        async fn find_monthly_topup_amount_by_card_number(
            &self,
            request: tonic::Request<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_topup_amount_by_card_number(
            &self,
            request: tonic::Request<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_withdraw_amount_by_card_number(
            &self,
            request: tonic::Request<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_withdraw_amount_by_card_number(
            &self,
            request: tonic::Request<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_transaction_amount_by_card_number(
            &self,
            request: tonic::Request<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_transaction_amount_by_card_number(
            &self,
            request: tonic::Request<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_sender_amount_by_card_number(
            &self,
            request: tonic::Request<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_sender_amount_by_card_number(
            &self,
            request: tonic::Request<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_receiver_amount_by_card_number(
            &self,
            request: tonic::Request<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_receiver_amount_by_card_number(
            &self,
            request: tonic::Request<super::FindYearAmountCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseYearlyAmount>,
            tonic::Status,
        >;
        async fn create_card(
            &self,
            request: tonic::Request<super::CreateCardRequest>,
        ) -> std::result::Result<tonic::Response<super::ApiResponseCard>, tonic::Status>;
        async fn update_card(
            &self,
            request: tonic::Request<super::UpdateCardRequest>,
        ) -> std::result::Result<tonic::Response<super::ApiResponseCard>, tonic::Status>;
        async fn trashed_card(
            &self,
            request: tonic::Request<super::FindByIdCardRequest>,
        ) -> std::result::Result<tonic::Response<super::ApiResponseCard>, tonic::Status>;
        async fn restore_card(
            &self,
            request: tonic::Request<super::FindByIdCardRequest>,
        ) -> std::result::Result<tonic::Response<super::ApiResponseCard>, tonic::Status>;
        async fn delete_card_permanent(
            &self,
            request: tonic::Request<super::FindByIdCardRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCardDelete>,
            tonic::Status,
        >;
        async fn restore_all_card(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCardAll>,
            tonic::Status,
        >;
        async fn delete_all_card_permanent(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseCardAll>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct CardServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> CardServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for CardServiceServer<T>
    where
        T: CardService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/card.CardService/FindAllCard" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllCardSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindAllCardRequest>
                    for FindAllCardSvc<T> {
                        type Response = super::ApiResponsePaginationCard;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllCardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_all_card(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindByIdCard" => {
                    #[allow(non_camel_case_types)]
                    struct FindByIdCardSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindByIdCardRequest>
                    for FindByIdCardSvc<T> {
                        type Response = super::ApiResponseCard;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdCardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_by_id_card(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByIdCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindByUserIdCard" => {
                    #[allow(non_camel_case_types)]
                    struct FindByUserIdCardSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindByUserIdCardRequest>
                    for FindByUserIdCardSvc<T> {
                        type Response = super::ApiResponseCard;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByUserIdCardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_by_user_id_card(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByUserIdCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindByActiveCard" => {
                    #[allow(non_camel_case_types)]
                    struct FindByActiveCardSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindAllCardRequest>
                    for FindByActiveCardSvc<T> {
                        type Response = super::ApiResponsePaginationCardDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllCardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_by_active_card(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByActiveCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindByTrashedCard" => {
                    #[allow(non_camel_case_types)]
                    struct FindByTrashedCardSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindAllCardRequest>
                    for FindByTrashedCardSvc<T> {
                        type Response = super::ApiResponsePaginationCardDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllCardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_by_trashed_card(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByTrashedCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindByCardNumberSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindByCardNumberRequest>
                    for FindByCardNumberSvc<T> {
                        type Response = super::ApiResponseCard;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByCardNumberRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_by_card_number(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/DashboardCard" => {
                    #[allow(non_camel_case_types)]
                    struct DashboardCardSvc<T: CardService>(pub Arc<T>);
                    impl<T: CardService> tonic::server::UnaryService<()>
                    for DashboardCardSvc<T> {
                        type Response = super::ApiResponseDashboardCard;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::dashboard_card(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DashboardCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/DashboardCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct DashboardCardNumberSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindByCardNumberRequest>
                    for DashboardCardNumberSvc<T> {
                        type Response = super::ApiResponseDashboardCardNumber;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByCardNumberRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::dashboard_card_number(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DashboardCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyBalance" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyBalanceSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearBalance>
                    for FindMonthlyBalanceSvc<T> {
                        type Response = super::ApiResponseMonthlyBalance;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearBalance>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_balance(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyBalanceSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyBalance" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyBalanceSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearBalance>
                    for FindYearlyBalanceSvc<T> {
                        type Response = super::ApiResponseYearlyBalance;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearBalance>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_balance(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyBalanceSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyTopupAmount" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTopupAmountSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmount>
                    for FindMonthlyTopupAmountSvc<T> {
                        type Response = super::ApiResponseMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmount>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_topup_amount(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTopupAmountSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyTopupAmount" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTopupAmountSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmount>
                    for FindYearlyTopupAmountSvc<T> {
                        type Response = super::ApiResponseYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmount>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_topup_amount(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTopupAmountSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyWithdrawAmount" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyWithdrawAmountSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmount>
                    for FindMonthlyWithdrawAmountSvc<T> {
                        type Response = super::ApiResponseMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmount>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_withdraw_amount(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyWithdrawAmountSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyWithdrawAmount" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyWithdrawAmountSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmount>
                    for FindYearlyWithdrawAmountSvc<T> {
                        type Response = super::ApiResponseYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmount>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_withdraw_amount(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyWithdrawAmountSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyTransactionAmount" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransactionAmountSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmount>
                    for FindMonthlyTransactionAmountSvc<T> {
                        type Response = super::ApiResponseMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmount>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_transaction_amount(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransactionAmountSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyTransactionAmount" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransactionAmountSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmount>
                    for FindYearlyTransactionAmountSvc<T> {
                        type Response = super::ApiResponseYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmount>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_transaction_amount(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransactionAmountSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyTransferSenderAmount" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferSenderAmountSvc<T: CardService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmount>
                    for FindMonthlyTransferSenderAmountSvc<T> {
                        type Response = super::ApiResponseMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmount>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_transfer_sender_amount(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferSenderAmountSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyTransferSenderAmount" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferSenderAmountSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmount>
                    for FindYearlyTransferSenderAmountSvc<T> {
                        type Response = super::ApiResponseYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmount>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_transfer_sender_amount(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferSenderAmountSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyTransferReceiverAmount" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferReceiverAmountSvc<T: CardService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmount>
                    for FindMonthlyTransferReceiverAmountSvc<T> {
                        type Response = super::ApiResponseMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmount>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_transfer_receiver_amount(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferReceiverAmountSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyTransferReceiverAmount" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferReceiverAmountSvc<T: CardService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmount>
                    for FindYearlyTransferReceiverAmountSvc<T> {
                        type Response = super::ApiResponseYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmount>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_transfer_receiver_amount(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferReceiverAmountSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyBalanceByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyBalanceByCardNumberSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearBalanceCardNumber>
                    for FindMonthlyBalanceByCardNumberSvc<T> {
                        type Response = super::ApiResponseMonthlyBalance;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearBalanceCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_balance_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyBalanceByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyBalanceByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyBalanceByCardNumberSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearBalanceCardNumber>
                    for FindYearlyBalanceByCardNumberSvc<T> {
                        type Response = super::ApiResponseYearlyBalance;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearBalanceCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_balance_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyBalanceByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyTopupAmountByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTopupAmountByCardNumberSvc<T: CardService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmountCardNumber>
                    for FindMonthlyTopupAmountByCardNumberSvc<T> {
                        type Response = super::ApiResponseMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmountCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_topup_amount_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTopupAmountByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyTopupAmountByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTopupAmountByCardNumberSvc<T: CardService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmountCardNumber>
                    for FindYearlyTopupAmountByCardNumberSvc<T> {
                        type Response = super::ApiResponseYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmountCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_topup_amount_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTopupAmountByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyWithdrawAmountByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyWithdrawAmountByCardNumberSvc<T: CardService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmountCardNumber>
                    for FindMonthlyWithdrawAmountByCardNumberSvc<T> {
                        type Response = super::ApiResponseMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmountCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_withdraw_amount_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyWithdrawAmountByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyWithdrawAmountByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyWithdrawAmountByCardNumberSvc<T: CardService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmountCardNumber>
                    for FindYearlyWithdrawAmountByCardNumberSvc<T> {
                        type Response = super::ApiResponseYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmountCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_withdraw_amount_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyWithdrawAmountByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyTransactionAmountByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransactionAmountByCardNumberSvc<T: CardService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmountCardNumber>
                    for FindMonthlyTransactionAmountByCardNumberSvc<T> {
                        type Response = super::ApiResponseMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmountCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_transaction_amount_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransactionAmountByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyTransactionAmountByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransactionAmountByCardNumberSvc<T: CardService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmountCardNumber>
                    for FindYearlyTransactionAmountByCardNumberSvc<T> {
                        type Response = super::ApiResponseYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmountCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_transaction_amount_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransactionAmountByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyTransferSenderAmountByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferSenderAmountByCardNumberSvc<
                        T: CardService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmountCardNumber>
                    for FindMonthlyTransferSenderAmountByCardNumberSvc<T> {
                        type Response = super::ApiResponseMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmountCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_transfer_sender_amount_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferSenderAmountByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyTransferSenderAmountByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferSenderAmountByCardNumberSvc<T: CardService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmountCardNumber>
                    for FindYearlyTransferSenderAmountByCardNumberSvc<T> {
                        type Response = super::ApiResponseYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmountCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_transfer_sender_amount_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferSenderAmountByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindMonthlyTransferReceiverAmountByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferReceiverAmountByCardNumberSvc<
                        T: CardService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmountCardNumber>
                    for FindMonthlyTransferReceiverAmountByCardNumberSvc<T> {
                        type Response = super::ApiResponseMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmountCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_monthly_transfer_receiver_amount_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferReceiverAmountByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/FindYearlyTransferReceiverAmountByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferReceiverAmountByCardNumberSvc<
                        T: CardService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindYearAmountCardNumber>
                    for FindYearlyTransferReceiverAmountByCardNumberSvc<T> {
                        type Response = super::ApiResponseYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearAmountCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::find_yearly_transfer_receiver_amount_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferReceiverAmountByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/CreateCard" => {
                    #[allow(non_camel_case_types)]
                    struct CreateCardSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::CreateCardRequest>
                    for CreateCardSvc<T> {
                        type Response = super::ApiResponseCard;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateCardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::create_card(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/UpdateCard" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateCardSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::UpdateCardRequest>
                    for UpdateCardSvc<T> {
                        type Response = super::ApiResponseCard;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateCardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::update_card(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/TrashedCard" => {
                    #[allow(non_camel_case_types)]
                    struct TrashedCardSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindByIdCardRequest>
                    for TrashedCardSvc<T> {
                        type Response = super::ApiResponseCard;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdCardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::trashed_card(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TrashedCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/RestoreCard" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreCardSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindByIdCardRequest>
                    for RestoreCardSvc<T> {
                        type Response = super::ApiResponseCard;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdCardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::restore_card(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/DeleteCardPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteCardPermanentSvc<T: CardService>(pub Arc<T>);
                    impl<
                        T: CardService,
                    > tonic::server::UnaryService<super::FindByIdCardRequest>
                    for DeleteCardPermanentSvc<T> {
                        type Response = super::ApiResponseCardDelete;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdCardRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::delete_card_permanent(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteCardPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/RestoreAllCard" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreAllCardSvc<T: CardService>(pub Arc<T>);
                    impl<T: CardService> tonic::server::UnaryService<()>
                    for RestoreAllCardSvc<T> {
                        type Response = super::ApiResponseCardAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::restore_all_card(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreAllCardSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/card.CardService/DeleteAllCardPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteAllCardPermanentSvc<T: CardService>(pub Arc<T>);
                    impl<T: CardService> tonic::server::UnaryService<()>
                    for DeleteAllCardPermanentSvc<T> {
                        type Response = super::ApiResponseCardAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as CardService>::delete_all_card_permanent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteAllCardPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for CardServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "card.CardService";
    impl<T> tonic::server::NamedService for CardServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
