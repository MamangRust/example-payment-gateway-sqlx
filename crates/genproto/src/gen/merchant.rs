// This file is @generated by prost-build.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateMerchantRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub user_id: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpdateMerchantRequest {
    #[prost(int32, tag = "1")]
    pub merchant_id: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub user_id: i32,
    #[prost(string, tag = "4")]
    pub status: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MerchantResponse {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub api_key: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub status: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub user_id: i32,
    #[prost(string, tag = "6")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub updated_at: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MerchantResponseDeleteAt {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub api_key: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub status: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub user_id: i32,
    #[prost(string, tag = "6")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MerchantTransactionResponse {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub amount: i32,
    #[prost(string, tag = "4")]
    pub payment_method: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub merchant_id: i32,
    #[prost(string, tag = "6")]
    pub merchant_name: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub transaction_time: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MerchantResponseMonthlyPaymentMethod {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub payment_method: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MerchantResponseYearlyPaymentMethod {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub payment_method: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MerchantResponseMonthlyAmount {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MerchantResponseYearlyAmount {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MerchantResponseMonthlyTotalAmount {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub year: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MerchantResponseYearlyTotalAmount {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseMerchantMonthlyPaymentMethod {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<MerchantResponseMonthlyPaymentMethod>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseMerchantYearlyPaymentMethod {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<MerchantResponseYearlyPaymentMethod>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseMerchantMonthlyAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<MerchantResponseMonthlyAmount>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseMerchantYearlyAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<MerchantResponseYearlyAmount>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseMerchantMonthlyTotalAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<MerchantResponseMonthlyTotalAmount>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseMerchantYearlyTotalAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<MerchantResponseYearlyTotalAmount>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsesMerchant {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<MerchantResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseMerchant {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<MerchantResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseMerchantDeleteAt {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<MerchantResponseDeleteAt>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseMerchantDelete {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseMerchantAll {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationMerchant {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<MerchantResponse>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationMerchantDeleteAt {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<MerchantResponseDeleteAt>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationMerchantTransaction {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<MerchantTransactionResponse>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllMerchantRequest {
    #[prost(int32, tag = "1")]
    pub page: i32,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub search: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllMerchantTransaction {
    #[prost(int32, tag = "1")]
    pub page: i32,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub search: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub merchant_id: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllMerchantApikey {
    #[prost(int32, tag = "1")]
    pub page: i32,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub search: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub api_key: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByIdMerchantRequest {
    #[prost(int32, tag = "1")]
    pub merchant_id: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByApiKeyRequest {
    #[prost(string, tag = "1")]
    pub api_key: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByMerchantUserIdRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TrashedMerchantRequest {
    #[prost(int32, tag = "1")]
    pub merchant_id: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RestoreMerchantRequest {
    #[prost(int32, tag = "1")]
    pub merchant_id: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearMerchant {
    #[prost(int32, tag = "1")]
    pub year: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearMerchantById {
    #[prost(int32, tag = "1")]
    pub year: i32,
    #[prost(int32, tag = "2")]
    pub merchant_id: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearMerchantByApikey {
    #[prost(int32, tag = "1")]
    pub year: i32,
    #[prost(string, tag = "2")]
    pub api_key: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod merchant_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MerchantServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MerchantServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MerchantServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MerchantServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MerchantServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn find_all_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchant>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindAllMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("merchant.MerchantService", "FindAllMerchant"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_id_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchant>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindByIdMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("merchant.MerchantService", "FindByIdMerchant"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_api_key(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByApiKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchant>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindByApiKey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("merchant.MerchantService", "FindByApiKey"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_all_transaction_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchantTransaction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindAllTransactionMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindAllTransactionMerchant",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_payment_methods_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyPaymentMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindMonthlyPaymentMethodsMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindMonthlyPaymentMethodsMerchant",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_payment_method_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyPaymentMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindYearlyPaymentMethodMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindYearlyPaymentMethodMerchant",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_amount_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindMonthlyAmountMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindMonthlyAmountMerchant",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_amount_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindYearlyAmountMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindYearlyAmountMerchant",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_total_amount_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyTotalAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindMonthlyTotalAmountMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindMonthlyTotalAmountMerchant",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_total_amount_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyTotalAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindYearlyTotalAmountMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindYearlyTotalAmountMerchant",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_all_transaction_by_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllMerchantTransaction>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchantTransaction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindAllTransactionByMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindAllTransactionByMerchant",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_payment_method_by_merchants(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyPaymentMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindMonthlyPaymentMethodByMerchants",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindMonthlyPaymentMethodByMerchants",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_payment_method_by_merchants(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyPaymentMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindYearlyPaymentMethodByMerchants",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindYearlyPaymentMethodByMerchants",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_amount_by_merchants(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindMonthlyAmountByMerchants",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindMonthlyAmountByMerchants",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_amount_by_merchants(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindYearlyAmountByMerchants",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindYearlyAmountByMerchants",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_total_amount_by_merchants(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyTotalAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindMonthlyTotalAmountByMerchants",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindMonthlyTotalAmountByMerchants",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_total_amount_by_merchants(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyTotalAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindYearlyTotalAmountByMerchants",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindYearlyTotalAmountByMerchants",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_all_transaction_by_apikey(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllMerchantApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchantTransaction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindAllTransactionByApikey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindAllTransactionByApikey",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_payment_method_by_apikey(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyPaymentMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindMonthlyPaymentMethodByApikey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindMonthlyPaymentMethodByApikey",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_payment_method_by_apikey(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyPaymentMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindYearlyPaymentMethodByApikey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindYearlyPaymentMethodByApikey",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_amount_by_apikey(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindMonthlyAmountByApikey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindMonthlyAmountByApikey",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_amount_by_apikey(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindYearlyAmountByApikey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindYearlyAmountByApikey",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_total_amount_by_apikey(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyTotalAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindMonthlyTotalAmountByApikey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindMonthlyTotalAmountByApikey",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_total_amount_by_apikey(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyTotalAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindYearlyTotalAmountByApikey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "FindYearlyTotalAmountByApikey",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_merchant_user_id(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByMerchantUserIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsesMerchant>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindByMerchantUserId",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("merchant.MerchantService", "FindByMerchantUserId"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_active(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchantDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindByActive",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("merchant.MerchantService", "FindByActive"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_trashed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchantDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/FindByTrashed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("merchant.MerchantService", "FindByTrashed"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchant>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/CreateMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("merchant.MerchantService", "CreateMerchant"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchant>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/UpdateMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("merchant.MerchantService", "UpdateMerchant"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn trashed_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/TrashedMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("merchant.MerchantService", "TrashedMerchant"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_merchant(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/RestoreMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("merchant.MerchantService", "RestoreMerchant"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_merchant_permanent(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantDelete>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/DeleteMerchantPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "DeleteMerchantPermanent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_all_merchant(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/RestoreAllMerchant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("merchant.MerchantService", "RestoreAllMerchant"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_all_merchant_permanent(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/merchant.MerchantService/DeleteAllMerchantPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "merchant.MerchantService",
                        "DeleteAllMerchantPermanent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod merchant_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MerchantServiceServer.
    #[async_trait]
    pub trait MerchantService: std::marker::Send + std::marker::Sync + 'static {
        async fn find_all_merchant(
            &self,
            request: tonic::Request<super::FindAllMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchant>,
            tonic::Status,
        >;
        async fn find_by_id_merchant(
            &self,
            request: tonic::Request<super::FindByIdMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchant>,
            tonic::Status,
        >;
        async fn find_by_api_key(
            &self,
            request: tonic::Request<super::FindByApiKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchant>,
            tonic::Status,
        >;
        async fn find_all_transaction_merchant(
            &self,
            request: tonic::Request<super::FindAllMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchantTransaction>,
            tonic::Status,
        >;
        async fn find_monthly_payment_methods_merchant(
            &self,
            request: tonic::Request<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyPaymentMethod>,
            tonic::Status,
        >;
        async fn find_yearly_payment_method_merchant(
            &self,
            request: tonic::Request<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyPaymentMethod>,
            tonic::Status,
        >;
        async fn find_monthly_amount_merchant(
            &self,
            request: tonic::Request<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_amount_merchant(
            &self,
            request: tonic::Request<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_total_amount_merchant(
            &self,
            request: tonic::Request<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyTotalAmount>,
            tonic::Status,
        >;
        async fn find_yearly_total_amount_merchant(
            &self,
            request: tonic::Request<super::FindYearMerchant>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyTotalAmount>,
            tonic::Status,
        >;
        async fn find_all_transaction_by_merchant(
            &self,
            request: tonic::Request<super::FindAllMerchantTransaction>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchantTransaction>,
            tonic::Status,
        >;
        async fn find_monthly_payment_method_by_merchants(
            &self,
            request: tonic::Request<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyPaymentMethod>,
            tonic::Status,
        >;
        async fn find_yearly_payment_method_by_merchants(
            &self,
            request: tonic::Request<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyPaymentMethod>,
            tonic::Status,
        >;
        async fn find_monthly_amount_by_merchants(
            &self,
            request: tonic::Request<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_amount_by_merchants(
            &self,
            request: tonic::Request<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_total_amount_by_merchants(
            &self,
            request: tonic::Request<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyTotalAmount>,
            tonic::Status,
        >;
        async fn find_yearly_total_amount_by_merchants(
            &self,
            request: tonic::Request<super::FindYearMerchantById>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyTotalAmount>,
            tonic::Status,
        >;
        async fn find_all_transaction_by_apikey(
            &self,
            request: tonic::Request<super::FindAllMerchantApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchantTransaction>,
            tonic::Status,
        >;
        async fn find_monthly_payment_method_by_apikey(
            &self,
            request: tonic::Request<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyPaymentMethod>,
            tonic::Status,
        >;
        async fn find_yearly_payment_method_by_apikey(
            &self,
            request: tonic::Request<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyPaymentMethod>,
            tonic::Status,
        >;
        async fn find_monthly_amount_by_apikey(
            &self,
            request: tonic::Request<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyAmount>,
            tonic::Status,
        >;
        async fn find_yearly_amount_by_apikey(
            &self,
            request: tonic::Request<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyAmount>,
            tonic::Status,
        >;
        async fn find_monthly_total_amount_by_apikey(
            &self,
            request: tonic::Request<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantMonthlyTotalAmount>,
            tonic::Status,
        >;
        async fn find_yearly_total_amount_by_apikey(
            &self,
            request: tonic::Request<super::FindYearMerchantByApikey>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantYearlyTotalAmount>,
            tonic::Status,
        >;
        async fn find_by_merchant_user_id(
            &self,
            request: tonic::Request<super::FindByMerchantUserIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsesMerchant>,
            tonic::Status,
        >;
        async fn find_by_active(
            &self,
            request: tonic::Request<super::FindAllMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchantDeleteAt>,
            tonic::Status,
        >;
        async fn find_by_trashed(
            &self,
            request: tonic::Request<super::FindAllMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationMerchantDeleteAt>,
            tonic::Status,
        >;
        async fn create_merchant(
            &self,
            request: tonic::Request<super::CreateMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchant>,
            tonic::Status,
        >;
        async fn update_merchant(
            &self,
            request: tonic::Request<super::UpdateMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchant>,
            tonic::Status,
        >;
        async fn trashed_merchant(
            &self,
            request: tonic::Request<super::FindByIdMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantDeleteAt>,
            tonic::Status,
        >;
        async fn restore_merchant(
            &self,
            request: tonic::Request<super::FindByIdMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantDeleteAt>,
            tonic::Status,
        >;
        async fn delete_merchant_permanent(
            &self,
            request: tonic::Request<super::FindByIdMerchantRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantDelete>,
            tonic::Status,
        >;
        async fn restore_all_merchant(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantAll>,
            tonic::Status,
        >;
        async fn delete_all_merchant_permanent(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseMerchantAll>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct MerchantServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MerchantServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MerchantServiceServer<T>
    where
        T: MerchantService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/merchant.MerchantService/FindAllMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllMerchantSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindAllMerchantRequest>
                    for FindAllMerchantSvc<T> {
                        type Response = super::ApiResponsePaginationMerchant;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllMerchantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_all_merchant(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindByIdMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct FindByIdMerchantSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindByIdMerchantRequest>
                    for FindByIdMerchantSvc<T> {
                        type Response = super::ApiResponseMerchant;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdMerchantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_by_id_merchant(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByIdMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindByApiKey" => {
                    #[allow(non_camel_case_types)]
                    struct FindByApiKeySvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindByApiKeyRequest>
                    for FindByApiKeySvc<T> {
                        type Response = super::ApiResponseMerchant;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByApiKeyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_by_api_key(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByApiKeySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindAllTransactionMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllTransactionMerchantSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindAllMerchantRequest>
                    for FindAllTransactionMerchantSvc<T> {
                        type Response = super::ApiResponsePaginationMerchantTransaction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllMerchantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_all_transaction_merchant(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllTransactionMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindMonthlyPaymentMethodsMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyPaymentMethodsMerchantSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchant>
                    for FindMonthlyPaymentMethodsMerchantSvc<T> {
                        type Response = super::ApiResponseMerchantMonthlyPaymentMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchant>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_monthly_payment_methods_merchant(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyPaymentMethodsMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindYearlyPaymentMethodMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyPaymentMethodMerchantSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchant>
                    for FindYearlyPaymentMethodMerchantSvc<T> {
                        type Response = super::ApiResponseMerchantYearlyPaymentMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchant>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_yearly_payment_method_merchant(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyPaymentMethodMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindMonthlyAmountMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyAmountMerchantSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchant>
                    for FindMonthlyAmountMerchantSvc<T> {
                        type Response = super::ApiResponseMerchantMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchant>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_monthly_amount_merchant(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyAmountMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindYearlyAmountMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyAmountMerchantSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchant>
                    for FindYearlyAmountMerchantSvc<T> {
                        type Response = super::ApiResponseMerchantYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchant>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_yearly_amount_merchant(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyAmountMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindMonthlyTotalAmountMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTotalAmountMerchantSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchant>
                    for FindMonthlyTotalAmountMerchantSvc<T> {
                        type Response = super::ApiResponseMerchantMonthlyTotalAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchant>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_monthly_total_amount_merchant(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTotalAmountMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindYearlyTotalAmountMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTotalAmountMerchantSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchant>
                    for FindYearlyTotalAmountMerchantSvc<T> {
                        type Response = super::ApiResponseMerchantYearlyTotalAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchant>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_yearly_total_amount_merchant(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTotalAmountMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindAllTransactionByMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllTransactionByMerchantSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindAllMerchantTransaction>
                    for FindAllTransactionByMerchantSvc<T> {
                        type Response = super::ApiResponsePaginationMerchantTransaction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllMerchantTransaction>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_all_transaction_by_merchant(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllTransactionByMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindMonthlyPaymentMethodByMerchants" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyPaymentMethodByMerchantsSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantById>
                    for FindMonthlyPaymentMethodByMerchantsSvc<T> {
                        type Response = super::ApiResponseMerchantMonthlyPaymentMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantById>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_monthly_payment_method_by_merchants(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyPaymentMethodByMerchantsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindYearlyPaymentMethodByMerchants" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyPaymentMethodByMerchantsSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantById>
                    for FindYearlyPaymentMethodByMerchantsSvc<T> {
                        type Response = super::ApiResponseMerchantYearlyPaymentMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantById>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_yearly_payment_method_by_merchants(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyPaymentMethodByMerchantsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindMonthlyAmountByMerchants" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyAmountByMerchantsSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantById>
                    for FindMonthlyAmountByMerchantsSvc<T> {
                        type Response = super::ApiResponseMerchantMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantById>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_monthly_amount_by_merchants(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyAmountByMerchantsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindYearlyAmountByMerchants" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyAmountByMerchantsSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantById>
                    for FindYearlyAmountByMerchantsSvc<T> {
                        type Response = super::ApiResponseMerchantYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantById>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_yearly_amount_by_merchants(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyAmountByMerchantsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindMonthlyTotalAmountByMerchants" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTotalAmountByMerchantsSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantById>
                    for FindMonthlyTotalAmountByMerchantsSvc<T> {
                        type Response = super::ApiResponseMerchantMonthlyTotalAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantById>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_monthly_total_amount_by_merchants(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTotalAmountByMerchantsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindYearlyTotalAmountByMerchants" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTotalAmountByMerchantsSvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantById>
                    for FindYearlyTotalAmountByMerchantsSvc<T> {
                        type Response = super::ApiResponseMerchantYearlyTotalAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantById>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_yearly_total_amount_by_merchants(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTotalAmountByMerchantsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindAllTransactionByApikey" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllTransactionByApikeySvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindAllMerchantApikey>
                    for FindAllTransactionByApikeySvc<T> {
                        type Response = super::ApiResponsePaginationMerchantTransaction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllMerchantApikey>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_all_transaction_by_apikey(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllTransactionByApikeySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindMonthlyPaymentMethodByApikey" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyPaymentMethodByApikeySvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantByApikey>
                    for FindMonthlyPaymentMethodByApikeySvc<T> {
                        type Response = super::ApiResponseMerchantMonthlyPaymentMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantByApikey>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_monthly_payment_method_by_apikey(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyPaymentMethodByApikeySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindYearlyPaymentMethodByApikey" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyPaymentMethodByApikeySvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantByApikey>
                    for FindYearlyPaymentMethodByApikeySvc<T> {
                        type Response = super::ApiResponseMerchantYearlyPaymentMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantByApikey>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_yearly_payment_method_by_apikey(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyPaymentMethodByApikeySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindMonthlyAmountByApikey" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyAmountByApikeySvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantByApikey>
                    for FindMonthlyAmountByApikeySvc<T> {
                        type Response = super::ApiResponseMerchantMonthlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantByApikey>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_monthly_amount_by_apikey(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyAmountByApikeySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindYearlyAmountByApikey" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyAmountByApikeySvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantByApikey>
                    for FindYearlyAmountByApikeySvc<T> {
                        type Response = super::ApiResponseMerchantYearlyAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantByApikey>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_yearly_amount_by_apikey(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyAmountByApikeySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindMonthlyTotalAmountByApikey" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTotalAmountByApikeySvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantByApikey>
                    for FindMonthlyTotalAmountByApikeySvc<T> {
                        type Response = super::ApiResponseMerchantMonthlyTotalAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantByApikey>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_monthly_total_amount_by_apikey(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTotalAmountByApikeySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindYearlyTotalAmountByApikey" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTotalAmountByApikeySvc<T: MerchantService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindYearMerchantByApikey>
                    for FindYearlyTotalAmountByApikeySvc<T> {
                        type Response = super::ApiResponseMerchantYearlyTotalAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearMerchantByApikey>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_yearly_total_amount_by_apikey(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTotalAmountByApikeySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindByMerchantUserId" => {
                    #[allow(non_camel_case_types)]
                    struct FindByMerchantUserIdSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindByMerchantUserIdRequest>
                    for FindByMerchantUserIdSvc<T> {
                        type Response = super::ApiResponsesMerchant;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByMerchantUserIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_by_merchant_user_id(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByMerchantUserIdSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindByActive" => {
                    #[allow(non_camel_case_types)]
                    struct FindByActiveSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindAllMerchantRequest>
                    for FindByActiveSvc<T> {
                        type Response = super::ApiResponsePaginationMerchantDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllMerchantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_by_active(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByActiveSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/FindByTrashed" => {
                    #[allow(non_camel_case_types)]
                    struct FindByTrashedSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindAllMerchantRequest>
                    for FindByTrashedSvc<T> {
                        type Response = super::ApiResponsePaginationMerchantDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllMerchantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::find_by_trashed(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByTrashedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/CreateMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct CreateMerchantSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::CreateMerchantRequest>
                    for CreateMerchantSvc<T> {
                        type Response = super::ApiResponseMerchant;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateMerchantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::create_merchant(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/UpdateMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateMerchantSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::UpdateMerchantRequest>
                    for UpdateMerchantSvc<T> {
                        type Response = super::ApiResponseMerchant;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateMerchantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::update_merchant(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/TrashedMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct TrashedMerchantSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindByIdMerchantRequest>
                    for TrashedMerchantSvc<T> {
                        type Response = super::ApiResponseMerchantDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdMerchantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::trashed_merchant(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TrashedMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/RestoreMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreMerchantSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindByIdMerchantRequest>
                    for RestoreMerchantSvc<T> {
                        type Response = super::ApiResponseMerchantDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdMerchantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::restore_merchant(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/DeleteMerchantPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteMerchantPermanentSvc<T: MerchantService>(pub Arc<T>);
                    impl<
                        T: MerchantService,
                    > tonic::server::UnaryService<super::FindByIdMerchantRequest>
                    for DeleteMerchantPermanentSvc<T> {
                        type Response = super::ApiResponseMerchantDelete;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdMerchantRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::delete_merchant_permanent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteMerchantPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/RestoreAllMerchant" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreAllMerchantSvc<T: MerchantService>(pub Arc<T>);
                    impl<T: MerchantService> tonic::server::UnaryService<()>
                    for RestoreAllMerchantSvc<T> {
                        type Response = super::ApiResponseMerchantAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::restore_all_merchant(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreAllMerchantSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/merchant.MerchantService/DeleteAllMerchantPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteAllMerchantPermanentSvc<T: MerchantService>(pub Arc<T>);
                    impl<T: MerchantService> tonic::server::UnaryService<()>
                    for DeleteAllMerchantPermanentSvc<T> {
                        type Response = super::ApiResponseMerchantAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MerchantService>::delete_all_merchant_permanent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteAllMerchantPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MerchantServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "merchant.MerchantService";
    impl<T> tonic::server::NamedService for MerchantServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
