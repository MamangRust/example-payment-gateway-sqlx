// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearWithdrawStatus {
    #[prost(int32, tag = "1")]
    pub year: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindMonthlyWithdrawStatus {
    #[prost(int32, tag = "1")]
    pub year: i32,
    #[prost(int32, tag = "2")]
    pub month: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearWithdrawStatusCardNumber {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindMonthlyWithdrawStatusCardNumber {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
    #[prost(int32, tag = "3")]
    pub month: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearWithdrawCardNumber {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllWithdrawRequest {
    #[prost(int32, tag = "1")]
    pub page: i32,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub search: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllWithdrawByCardNumberRequest {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page: i32,
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    #[prost(string, tag = "4")]
    pub search: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByIdWithdrawRequest {
    #[prost(int32, tag = "1")]
    pub withdraw_id: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateWithdrawRequest {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub withdraw_amount: i32,
    #[prost(message, optional, tag = "3")]
    pub withdraw_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpdateWithdrawRequest {
    #[prost(int32, tag = "1")]
    pub withdraw_id: i32,
    #[prost(string, tag = "2")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub withdraw_amount: i32,
    #[prost(message, optional, tag = "4")]
    pub withdraw_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WithdrawResponse {
    #[prost(int32, tag = "1")]
    pub withdraw_id: i32,
    #[prost(string, tag = "2")]
    pub withdraw_no: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub withdraw_amount: i32,
    #[prost(string, tag = "5")]
    pub withdraw_time: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub updated_at: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WithdrawResponseDeleteAt {
    #[prost(int32, tag = "1")]
    pub withdraw_id: i32,
    #[prost(string, tag = "2")]
    pub withdraw_no: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub withdraw_amount: i32,
    #[prost(string, tag = "5")]
    pub withdraw_time: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WithdrawMonthStatusSuccessResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub month: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_success: i32,
    #[prost(int32, tag = "4")]
    pub total_amount: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WithdrawYearStatusSuccessResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_success: i32,
    #[prost(int32, tag = "4")]
    pub total_amount: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WithdrawMonthStatusFailedResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub month: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_failed: i32,
    #[prost(int32, tag = "4")]
    pub total_amount: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WithdrawYearStatusFailedResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_failed: i32,
    #[prost(int32, tag = "4")]
    pub total_amount: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WithdrawMonthlyAmountResponse {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_amount: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WithdrawYearlyAmountResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_amount: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseWithdrawMonthStatusSuccess {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<WithdrawMonthStatusSuccessResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseWithdrawYearStatusSuccess {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<WithdrawYearStatusSuccessResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseWithdrawMonthStatusFailed {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<WithdrawMonthStatusFailedResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseWithdrawYearStatusFailed {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<WithdrawYearStatusFailedResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseWithdrawMonthAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<WithdrawMonthlyAmountResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseWithdrawYearAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<WithdrawYearlyAmountResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsesWithdraw {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<WithdrawResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseWithdraw {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<WithdrawResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseWithdrawDelete {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseWithdrawAll {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationWithdraw {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<WithdrawResponse>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationWithdrawDeleteAt {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<WithdrawResponseDeleteAt>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
/// Generated client implementations.
pub mod withdraw_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct WithdrawServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl WithdrawServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> WithdrawServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> WithdrawServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            WithdrawServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn find_all_withdraw(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationWithdraw>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindAllWithdraw",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("withdraw.WithdrawService", "FindAllWithdraw"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_all_withdraw_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllWithdrawByCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationWithdraw>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindAllWithdrawByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindAllWithdrawByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_id_withdraw(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdraw>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindByIdWithdraw",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("withdraw.WithdrawService", "FindByIdWithdraw"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_withdraw_status_success(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindMonthlyWithdrawStatusSuccess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindMonthlyWithdrawStatusSuccess",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_withdraw_status_success(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindYearlyWithdrawStatusSuccess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindYearlyWithdrawStatusSuccess",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_withdraw_status_failed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindMonthlyWithdrawStatusFailed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindMonthlyWithdrawStatusFailed",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_withdraw_status_failed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindYearlyWithdrawStatusFailed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindYearlyWithdrawStatusFailed",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_withdraw_status_success_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyWithdrawStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindMonthlyWithdrawStatusSuccessCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindMonthlyWithdrawStatusSuccessCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_withdraw_status_success_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearWithdrawStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindYearlyWithdrawStatusSuccessCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindYearlyWithdrawStatusSuccessCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_withdraw_status_failed_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyWithdrawStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindMonthlyWithdrawStatusFailedCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindMonthlyWithdrawStatusFailedCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_withdraw_status_failed_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearWithdrawStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindYearlyWithdrawStatusFailedCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindYearlyWithdrawStatusFailedCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_withdraws(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindMonthlyWithdraws",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("withdraw.WithdrawService", "FindMonthlyWithdraws"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_withdraws(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindYearlyWithdraws",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("withdraw.WithdrawService", "FindYearlyWithdraws"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_withdraws_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearWithdrawCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindMonthlyWithdrawsByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindMonthlyWithdrawsByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_withdraws_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearWithdrawCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindYearlyWithdrawsByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "FindYearlyWithdrawsByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::super::card::FindByCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsesWithdraw>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("withdraw.WithdrawService", "FindByCardNumber"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_active(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationWithdrawDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindByActive",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("withdraw.WithdrawService", "FindByActive"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_trashed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationWithdrawDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/FindByTrashed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("withdraw.WithdrawService", "FindByTrashed"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_withdraw(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdraw>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/CreateWithdraw",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("withdraw.WithdrawService", "CreateWithdraw"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_withdraw(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdraw>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/UpdateWithdraw",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("withdraw.WithdrawService", "UpdateWithdraw"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn trashed_withdraw(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdraw>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/TrashedWithdraw",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("withdraw.WithdrawService", "TrashedWithdraw"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_withdraw(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdraw>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/RestoreWithdraw",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("withdraw.WithdrawService", "RestoreWithdraw"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_withdraw_permanent(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawDelete>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/DeleteWithdrawPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "DeleteWithdrawPermanent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_all_withdraw(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/RestoreAllWithdraw",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("withdraw.WithdrawService", "RestoreAllWithdraw"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_all_withdraw_permanent(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/withdraw.WithdrawService/DeleteAllWithdrawPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "withdraw.WithdrawService",
                        "DeleteAllWithdrawPermanent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod withdraw_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with WithdrawServiceServer.
    #[async_trait]
    pub trait WithdrawService: std::marker::Send + std::marker::Sync + 'static {
        async fn find_all_withdraw(
            &self,
            request: tonic::Request<super::FindAllWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationWithdraw>,
            tonic::Status,
        >;
        async fn find_all_withdraw_by_card_number(
            &self,
            request: tonic::Request<super::FindAllWithdrawByCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationWithdraw>,
            tonic::Status,
        >;
        async fn find_by_id_withdraw(
            &self,
            request: tonic::Request<super::FindByIdWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdraw>,
            tonic::Status,
        >;
        async fn find_monthly_withdraw_status_success(
            &self,
            request: tonic::Request<super::FindMonthlyWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthStatusSuccess>,
            tonic::Status,
        >;
        async fn find_yearly_withdraw_status_success(
            &self,
            request: tonic::Request<super::FindYearWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearStatusSuccess>,
            tonic::Status,
        >;
        async fn find_monthly_withdraw_status_failed(
            &self,
            request: tonic::Request<super::FindMonthlyWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthStatusFailed>,
            tonic::Status,
        >;
        async fn find_yearly_withdraw_status_failed(
            &self,
            request: tonic::Request<super::FindYearWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearStatusFailed>,
            tonic::Status,
        >;
        async fn find_monthly_withdraw_status_success_card_number(
            &self,
            request: tonic::Request<super::FindMonthlyWithdrawStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthStatusSuccess>,
            tonic::Status,
        >;
        async fn find_yearly_withdraw_status_success_card_number(
            &self,
            request: tonic::Request<super::FindYearWithdrawStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearStatusSuccess>,
            tonic::Status,
        >;
        async fn find_monthly_withdraw_status_failed_card_number(
            &self,
            request: tonic::Request<super::FindMonthlyWithdrawStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthStatusFailed>,
            tonic::Status,
        >;
        async fn find_yearly_withdraw_status_failed_card_number(
            &self,
            request: tonic::Request<super::FindYearWithdrawStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearStatusFailed>,
            tonic::Status,
        >;
        async fn find_monthly_withdraws(
            &self,
            request: tonic::Request<super::FindYearWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthAmount>,
            tonic::Status,
        >;
        async fn find_yearly_withdraws(
            &self,
            request: tonic::Request<super::FindYearWithdrawStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearAmount>,
            tonic::Status,
        >;
        async fn find_monthly_withdraws_by_card_number(
            &self,
            request: tonic::Request<super::FindYearWithdrawCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawMonthAmount>,
            tonic::Status,
        >;
        async fn find_yearly_withdraws_by_card_number(
            &self,
            request: tonic::Request<super::FindYearWithdrawCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawYearAmount>,
            tonic::Status,
        >;
        async fn find_by_card_number(
            &self,
            request: tonic::Request<super::super::card::FindByCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsesWithdraw>,
            tonic::Status,
        >;
        async fn find_by_active(
            &self,
            request: tonic::Request<super::FindAllWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationWithdrawDeleteAt>,
            tonic::Status,
        >;
        async fn find_by_trashed(
            &self,
            request: tonic::Request<super::FindAllWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationWithdrawDeleteAt>,
            tonic::Status,
        >;
        async fn create_withdraw(
            &self,
            request: tonic::Request<super::CreateWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdraw>,
            tonic::Status,
        >;
        async fn update_withdraw(
            &self,
            request: tonic::Request<super::UpdateWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdraw>,
            tonic::Status,
        >;
        async fn trashed_withdraw(
            &self,
            request: tonic::Request<super::FindByIdWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdraw>,
            tonic::Status,
        >;
        async fn restore_withdraw(
            &self,
            request: tonic::Request<super::FindByIdWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdraw>,
            tonic::Status,
        >;
        async fn delete_withdraw_permanent(
            &self,
            request: tonic::Request<super::FindByIdWithdrawRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawDelete>,
            tonic::Status,
        >;
        async fn restore_all_withdraw(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawAll>,
            tonic::Status,
        >;
        async fn delete_all_withdraw_permanent(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseWithdrawAll>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct WithdrawServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> WithdrawServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for WithdrawServiceServer<T>
    where
        T: WithdrawService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/withdraw.WithdrawService/FindAllWithdraw" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllWithdrawSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindAllWithdrawRequest>
                    for FindAllWithdrawSvc<T> {
                        type Response = super::ApiResponsePaginationWithdraw;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllWithdrawRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_all_withdraw(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllWithdrawSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindAllWithdrawByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllWithdrawByCardNumberSvc<T: WithdrawService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<
                        super::FindAllWithdrawByCardNumberRequest,
                    > for FindAllWithdrawByCardNumberSvc<T> {
                        type Response = super::ApiResponsePaginationWithdraw;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindAllWithdrawByCardNumberRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_all_withdraw_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllWithdrawByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindByIdWithdraw" => {
                    #[allow(non_camel_case_types)]
                    struct FindByIdWithdrawSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindByIdWithdrawRequest>
                    for FindByIdWithdrawSvc<T> {
                        type Response = super::ApiResponseWithdraw;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdWithdrawRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_by_id_withdraw(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByIdWithdrawSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindMonthlyWithdrawStatusSuccess" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyWithdrawStatusSuccessSvc<T: WithdrawService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindMonthlyWithdrawStatus>
                    for FindMonthlyWithdrawStatusSuccessSvc<T> {
                        type Response = super::ApiResponseWithdrawMonthStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindMonthlyWithdrawStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_monthly_withdraw_status_success(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyWithdrawStatusSuccessSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindYearlyWithdrawStatusSuccess" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyWithdrawStatusSuccessSvc<T: WithdrawService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindYearWithdrawStatus>
                    for FindYearlyWithdrawStatusSuccessSvc<T> {
                        type Response = super::ApiResponseWithdrawYearStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearWithdrawStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_yearly_withdraw_status_success(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyWithdrawStatusSuccessSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindMonthlyWithdrawStatusFailed" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyWithdrawStatusFailedSvc<T: WithdrawService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindMonthlyWithdrawStatus>
                    for FindMonthlyWithdrawStatusFailedSvc<T> {
                        type Response = super::ApiResponseWithdrawMonthStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindMonthlyWithdrawStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_monthly_withdraw_status_failed(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyWithdrawStatusFailedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindYearlyWithdrawStatusFailed" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyWithdrawStatusFailedSvc<T: WithdrawService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindYearWithdrawStatus>
                    for FindYearlyWithdrawStatusFailedSvc<T> {
                        type Response = super::ApiResponseWithdrawYearStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearWithdrawStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_yearly_withdraw_status_failed(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyWithdrawStatusFailedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindMonthlyWithdrawStatusSuccessCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyWithdrawStatusSuccessCardNumberSvc<
                        T: WithdrawService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<
                        super::FindMonthlyWithdrawStatusCardNumber,
                    > for FindMonthlyWithdrawStatusSuccessCardNumberSvc<T> {
                        type Response = super::ApiResponseWithdrawMonthStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindMonthlyWithdrawStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_monthly_withdraw_status_success_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyWithdrawStatusSuccessCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindYearlyWithdrawStatusSuccessCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyWithdrawStatusSuccessCardNumberSvc<
                        T: WithdrawService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<
                        super::FindYearWithdrawStatusCardNumber,
                    > for FindYearlyWithdrawStatusSuccessCardNumberSvc<T> {
                        type Response = super::ApiResponseWithdrawYearStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindYearWithdrawStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_yearly_withdraw_status_success_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyWithdrawStatusSuccessCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindMonthlyWithdrawStatusFailedCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyWithdrawStatusFailedCardNumberSvc<
                        T: WithdrawService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<
                        super::FindMonthlyWithdrawStatusCardNumber,
                    > for FindMonthlyWithdrawStatusFailedCardNumberSvc<T> {
                        type Response = super::ApiResponseWithdrawMonthStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindMonthlyWithdrawStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_monthly_withdraw_status_failed_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyWithdrawStatusFailedCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindYearlyWithdrawStatusFailedCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyWithdrawStatusFailedCardNumberSvc<
                        T: WithdrawService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<
                        super::FindYearWithdrawStatusCardNumber,
                    > for FindYearlyWithdrawStatusFailedCardNumberSvc<T> {
                        type Response = super::ApiResponseWithdrawYearStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindYearWithdrawStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_yearly_withdraw_status_failed_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyWithdrawStatusFailedCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindMonthlyWithdraws" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyWithdrawsSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindYearWithdrawStatus>
                    for FindMonthlyWithdrawsSvc<T> {
                        type Response = super::ApiResponseWithdrawMonthAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearWithdrawStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_monthly_withdraws(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyWithdrawsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindYearlyWithdraws" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyWithdrawsSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindYearWithdrawStatus>
                    for FindYearlyWithdrawsSvc<T> {
                        type Response = super::ApiResponseWithdrawYearAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearWithdrawStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_yearly_withdraws(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyWithdrawsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindMonthlyWithdrawsByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyWithdrawsByCardNumberSvc<T: WithdrawService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindYearWithdrawCardNumber>
                    for FindMonthlyWithdrawsByCardNumberSvc<T> {
                        type Response = super::ApiResponseWithdrawMonthAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearWithdrawCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_monthly_withdraws_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyWithdrawsByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindYearlyWithdrawsByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyWithdrawsByCardNumberSvc<T: WithdrawService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindYearWithdrawCardNumber>
                    for FindYearlyWithdrawsByCardNumberSvc<T> {
                        type Response = super::ApiResponseWithdrawYearAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearWithdrawCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_yearly_withdraws_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyWithdrawsByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindByCardNumberSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<
                        super::super::card::FindByCardNumberRequest,
                    > for FindByCardNumberSvc<T> {
                        type Response = super::ApiResponsesWithdraw;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::card::FindByCardNumberRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_by_card_number(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindByActive" => {
                    #[allow(non_camel_case_types)]
                    struct FindByActiveSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindAllWithdrawRequest>
                    for FindByActiveSvc<T> {
                        type Response = super::ApiResponsePaginationWithdrawDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllWithdrawRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_by_active(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByActiveSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/FindByTrashed" => {
                    #[allow(non_camel_case_types)]
                    struct FindByTrashedSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindAllWithdrawRequest>
                    for FindByTrashedSvc<T> {
                        type Response = super::ApiResponsePaginationWithdrawDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllWithdrawRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::find_by_trashed(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByTrashedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/CreateWithdraw" => {
                    #[allow(non_camel_case_types)]
                    struct CreateWithdrawSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::CreateWithdrawRequest>
                    for CreateWithdrawSvc<T> {
                        type Response = super::ApiResponseWithdraw;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateWithdrawRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::create_withdraw(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateWithdrawSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/UpdateWithdraw" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateWithdrawSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::UpdateWithdrawRequest>
                    for UpdateWithdrawSvc<T> {
                        type Response = super::ApiResponseWithdraw;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateWithdrawRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::update_withdraw(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateWithdrawSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/TrashedWithdraw" => {
                    #[allow(non_camel_case_types)]
                    struct TrashedWithdrawSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindByIdWithdrawRequest>
                    for TrashedWithdrawSvc<T> {
                        type Response = super::ApiResponseWithdraw;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdWithdrawRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::trashed_withdraw(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TrashedWithdrawSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/RestoreWithdraw" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreWithdrawSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindByIdWithdrawRequest>
                    for RestoreWithdrawSvc<T> {
                        type Response = super::ApiResponseWithdraw;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdWithdrawRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::restore_withdraw(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreWithdrawSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/DeleteWithdrawPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteWithdrawPermanentSvc<T: WithdrawService>(pub Arc<T>);
                    impl<
                        T: WithdrawService,
                    > tonic::server::UnaryService<super::FindByIdWithdrawRequest>
                    for DeleteWithdrawPermanentSvc<T> {
                        type Response = super::ApiResponseWithdrawDelete;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdWithdrawRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::delete_withdraw_permanent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteWithdrawPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/RestoreAllWithdraw" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreAllWithdrawSvc<T: WithdrawService>(pub Arc<T>);
                    impl<T: WithdrawService> tonic::server::UnaryService<()>
                    for RestoreAllWithdrawSvc<T> {
                        type Response = super::ApiResponseWithdrawAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::restore_all_withdraw(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreAllWithdrawSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/withdraw.WithdrawService/DeleteAllWithdrawPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteAllWithdrawPermanentSvc<T: WithdrawService>(pub Arc<T>);
                    impl<T: WithdrawService> tonic::server::UnaryService<()>
                    for DeleteAllWithdrawPermanentSvc<T> {
                        type Response = super::ApiResponseWithdrawAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WithdrawService>::delete_all_withdraw_permanent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteAllWithdrawPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for WithdrawServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "withdraw.WithdrawService";
    impl<T> tonic::server::NamedService for WithdrawServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
