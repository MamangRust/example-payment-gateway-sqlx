// This file is @generated by prost-build.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllTopupRequest {
    #[prost(int32, tag = "1")]
    pub page: i32,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub search: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllTopupByCardNumberRequest {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub page: i32,
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    #[prost(string, tag = "4")]
    pub search: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByIdTopupRequest {
    #[prost(int32, tag = "1")]
    pub topup_id: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindMonthlyTopupStatus {
    #[prost(int32, tag = "1")]
    pub year: i32,
    #[prost(int32, tag = "2")]
    pub month: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearTopupStatus {
    #[prost(int32, tag = "1")]
    pub year: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindMonthlyTopupStatusCardNumber {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
    #[prost(int32, tag = "3")]
    pub month: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearTopupStatusCardNumber {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByCardNumberTopupRequest {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearTopupCardNumber {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateTopupRequest {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub topup_amount: i32,
    #[prost(string, tag = "3")]
    pub topup_method: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpdateTopupRequest {
    #[prost(int32, tag = "1")]
    pub topup_id: i32,
    #[prost(string, tag = "2")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub topup_amount: i32,
    #[prost(string, tag = "4")]
    pub topup_method: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TopupResponse {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub topup_no: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub topup_amount: i64,
    #[prost(string, tag = "5")]
    pub topup_method: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub topup_time: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub updated_at: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TopupResponseDeleteAt {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub topup_no: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub topup_amount: i64,
    #[prost(string, tag = "5")]
    pub topup_method: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub topup_time: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TopupMonthStatusSuccessResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub month: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_success: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TopupYearStatusSuccessResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_success: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TopupMonthStatusFailedResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub month: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_failed: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TopupYearStatusFailedResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_failed: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TopupMonthMethodResponse {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub topup_method: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_topups: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TopupYearlyMethodResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub topup_method: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_topups: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TopupMonthAmountResponse {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TopupYearlyAmountResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTopupMonthStatusSuccess {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupMonthStatusSuccessResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTopupYearStatusSuccess {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupYearStatusSuccessResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTopupMonthStatusFailed {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupMonthStatusFailedResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTopupYearStatusFailed {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupYearStatusFailedResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTopupMonthMethod {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupMonthMethodResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTopupYearMethod {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupYearlyMethodResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTopupMonthAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupMonthAmountResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTopupYearAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupYearlyAmountResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTopup {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<TopupResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTopupDeleteAt {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<TopupResponseDeleteAt>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsesTopup {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationTopup {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupResponse>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationTopupDeleteAt {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TopupResponseDeleteAt>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTopupDelete {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTopupAll {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod topup_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct TopupServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TopupServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TopupServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TopupServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TopupServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn find_all_topup(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTopup>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindAllTopup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "FindAllTopup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_all_topup_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTopupByCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTopup>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindAllTopupByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("topup.TopupService", "FindAllTopupByCardNumber"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_id_topup(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopup>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindByIdTopup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "FindByIdTopup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_topup_status_success(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindMonthlyTopupStatusSuccess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "topup.TopupService",
                        "FindMonthlyTopupStatusSuccess",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_topup_status_success(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindYearlyTopupStatusSuccess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("topup.TopupService", "FindYearlyTopupStatusSuccess"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_topup_status_failed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindMonthlyTopupStatusFailed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("topup.TopupService", "FindMonthlyTopupStatusFailed"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_topup_status_failed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindYearlyTopupStatusFailed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("topup.TopupService", "FindYearlyTopupStatusFailed"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_topup_status_success_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyTopupStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindMonthlyTopupStatusSuccessByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "topup.TopupService",
                        "FindMonthlyTopupStatusSuccessByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_topup_status_success_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindYearlyTopupStatusSuccessByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "topup.TopupService",
                        "FindYearlyTopupStatusSuccessByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_topup_status_failed_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyTopupStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindMonthlyTopupStatusFailedByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "topup.TopupService",
                        "FindMonthlyTopupStatusFailedByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_topup_status_failed_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindYearlyTopupStatusFailedByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "topup.TopupService",
                        "FindYearlyTopupStatusFailedByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_topup_methods(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindMonthlyTopupMethods",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("topup.TopupService", "FindMonthlyTopupMethods"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_topup_methods(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindYearlyTopupMethods",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "FindYearlyTopupMethods"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_topup_amounts(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindMonthlyTopupAmounts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("topup.TopupService", "FindMonthlyTopupAmounts"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_topup_amounts(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindYearlyTopupAmounts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "FindYearlyTopupAmounts"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_topup_methods_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindMonthlyTopupMethodsByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "topup.TopupService",
                        "FindMonthlyTopupMethodsByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_topup_methods_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearMethod>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindYearlyTopupMethodsByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "topup.TopupService",
                        "FindYearlyTopupMethodsByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_topup_amounts_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindMonthlyTopupAmountsByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "topup.TopupService",
                        "FindMonthlyTopupAmountsByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_topup_amounts_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTopupCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindYearlyTopupAmountsByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "topup.TopupService",
                        "FindYearlyTopupAmountsByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_card_number_topup(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByCardNumberTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsesTopup>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindByCardNumberTopup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "FindByCardNumberTopup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_active(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTopupDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindByActive",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "FindByActive"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_trashed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTopupDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/FindByTrashed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "FindByTrashed"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_topup(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopup>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/CreateTopup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "CreateTopup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_topup(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopup>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/UpdateTopup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "UpdateTopup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn trashed_topup(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/TrashedTopup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "TrashedTopup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_topup(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/RestoreTopup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "RestoreTopup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_topup_permanent(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupDelete>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/DeleteTopupPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "DeleteTopupPermanent"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_all_topup(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/RestoreAllTopup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("topup.TopupService", "RestoreAllTopup"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_all_topup_permanent(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/topup.TopupService/DeleteAllTopupPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("topup.TopupService", "DeleteAllTopupPermanent"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod topup_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TopupServiceServer.
    #[async_trait]
    pub trait TopupService: std::marker::Send + std::marker::Sync + 'static {
        async fn find_all_topup(
            &self,
            request: tonic::Request<super::FindAllTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTopup>,
            tonic::Status,
        >;
        async fn find_all_topup_by_card_number(
            &self,
            request: tonic::Request<super::FindAllTopupByCardNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTopup>,
            tonic::Status,
        >;
        async fn find_by_id_topup(
            &self,
            request: tonic::Request<super::FindByIdTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopup>,
            tonic::Status,
        >;
        async fn find_monthly_topup_status_success(
            &self,
            request: tonic::Request<super::FindMonthlyTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthStatusSuccess>,
            tonic::Status,
        >;
        async fn find_yearly_topup_status_success(
            &self,
            request: tonic::Request<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearStatusSuccess>,
            tonic::Status,
        >;
        async fn find_monthly_topup_status_failed(
            &self,
            request: tonic::Request<super::FindMonthlyTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthStatusFailed>,
            tonic::Status,
        >;
        async fn find_yearly_topup_status_failed(
            &self,
            request: tonic::Request<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearStatusFailed>,
            tonic::Status,
        >;
        async fn find_monthly_topup_status_success_by_card_number(
            &self,
            request: tonic::Request<super::FindMonthlyTopupStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthStatusSuccess>,
            tonic::Status,
        >;
        async fn find_yearly_topup_status_success_by_card_number(
            &self,
            request: tonic::Request<super::FindYearTopupStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearStatusSuccess>,
            tonic::Status,
        >;
        async fn find_monthly_topup_status_failed_by_card_number(
            &self,
            request: tonic::Request<super::FindMonthlyTopupStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthStatusFailed>,
            tonic::Status,
        >;
        async fn find_yearly_topup_status_failed_by_card_number(
            &self,
            request: tonic::Request<super::FindYearTopupStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearStatusFailed>,
            tonic::Status,
        >;
        async fn find_monthly_topup_methods(
            &self,
            request: tonic::Request<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthMethod>,
            tonic::Status,
        >;
        async fn find_yearly_topup_methods(
            &self,
            request: tonic::Request<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearMethod>,
            tonic::Status,
        >;
        async fn find_monthly_topup_amounts(
            &self,
            request: tonic::Request<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthAmount>,
            tonic::Status,
        >;
        async fn find_yearly_topup_amounts(
            &self,
            request: tonic::Request<super::FindYearTopupStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearAmount>,
            tonic::Status,
        >;
        async fn find_monthly_topup_methods_by_card_number(
            &self,
            request: tonic::Request<super::FindYearTopupCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthMethod>,
            tonic::Status,
        >;
        async fn find_yearly_topup_methods_by_card_number(
            &self,
            request: tonic::Request<super::FindYearTopupCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearMethod>,
            tonic::Status,
        >;
        async fn find_monthly_topup_amounts_by_card_number(
            &self,
            request: tonic::Request<super::FindYearTopupCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupMonthAmount>,
            tonic::Status,
        >;
        async fn find_yearly_topup_amounts_by_card_number(
            &self,
            request: tonic::Request<super::FindYearTopupCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupYearAmount>,
            tonic::Status,
        >;
        async fn find_by_card_number_topup(
            &self,
            request: tonic::Request<super::FindByCardNumberTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsesTopup>,
            tonic::Status,
        >;
        async fn find_by_active(
            &self,
            request: tonic::Request<super::FindAllTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTopupDeleteAt>,
            tonic::Status,
        >;
        async fn find_by_trashed(
            &self,
            request: tonic::Request<super::FindAllTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTopupDeleteAt>,
            tonic::Status,
        >;
        async fn create_topup(
            &self,
            request: tonic::Request<super::CreateTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopup>,
            tonic::Status,
        >;
        async fn update_topup(
            &self,
            request: tonic::Request<super::UpdateTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopup>,
            tonic::Status,
        >;
        async fn trashed_topup(
            &self,
            request: tonic::Request<super::FindByIdTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupDeleteAt>,
            tonic::Status,
        >;
        async fn restore_topup(
            &self,
            request: tonic::Request<super::FindByIdTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupDeleteAt>,
            tonic::Status,
        >;
        async fn delete_topup_permanent(
            &self,
            request: tonic::Request<super::FindByIdTopupRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupDelete>,
            tonic::Status,
        >;
        async fn restore_all_topup(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupAll>,
            tonic::Status,
        >;
        async fn delete_all_topup_permanent(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTopupAll>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct TopupServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> TopupServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TopupServiceServer<T>
    where
        T: TopupService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/topup.TopupService/FindAllTopup" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllTopupSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindAllTopupRequest>
                    for FindAllTopupSvc<T> {
                        type Response = super::ApiResponsePaginationTopup;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllTopupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_all_topup(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllTopupSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindAllTopupByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllTopupByCardNumberSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindAllTopupByCardNumberRequest>
                    for FindAllTopupByCardNumberSvc<T> {
                        type Response = super::ApiResponsePaginationTopup;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindAllTopupByCardNumberRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_all_topup_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllTopupByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindByIdTopup" => {
                    #[allow(non_camel_case_types)]
                    struct FindByIdTopupSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindByIdTopupRequest>
                    for FindByIdTopupSvc<T> {
                        type Response = super::ApiResponseTopup;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTopupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_by_id_topup(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByIdTopupSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindMonthlyTopupStatusSuccess" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTopupStatusSuccessSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindMonthlyTopupStatus>
                    for FindMonthlyTopupStatusSuccessSvc<T> {
                        type Response = super::ApiResponseTopupMonthStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindMonthlyTopupStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_monthly_topup_status_success(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTopupStatusSuccessSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindYearlyTopupStatusSuccess" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTopupStatusSuccessSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupStatus>
                    for FindYearlyTopupStatusSuccessSvc<T> {
                        type Response = super::ApiResponseTopupYearStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_yearly_topup_status_success(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTopupStatusSuccessSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindMonthlyTopupStatusFailed" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTopupStatusFailedSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindMonthlyTopupStatus>
                    for FindMonthlyTopupStatusFailedSvc<T> {
                        type Response = super::ApiResponseTopupMonthStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindMonthlyTopupStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_monthly_topup_status_failed(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTopupStatusFailedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindYearlyTopupStatusFailed" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTopupStatusFailedSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupStatus>
                    for FindYearlyTopupStatusFailedSvc<T> {
                        type Response = super::ApiResponseTopupYearStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_yearly_topup_status_failed(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTopupStatusFailedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindMonthlyTopupStatusSuccessByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTopupStatusSuccessByCardNumberSvc<T: TopupService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<
                        super::FindMonthlyTopupStatusCardNumber,
                    > for FindMonthlyTopupStatusSuccessByCardNumberSvc<T> {
                        type Response = super::ApiResponseTopupMonthStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindMonthlyTopupStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_monthly_topup_status_success_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTopupStatusSuccessByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindYearlyTopupStatusSuccessByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTopupStatusSuccessByCardNumberSvc<T: TopupService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupStatusCardNumber>
                    for FindYearlyTopupStatusSuccessByCardNumberSvc<T> {
                        type Response = super::ApiResponseTopupYearStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupStatusCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_yearly_topup_status_success_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTopupStatusSuccessByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindMonthlyTopupStatusFailedByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTopupStatusFailedByCardNumberSvc<T: TopupService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<
                        super::FindMonthlyTopupStatusCardNumber,
                    > for FindMonthlyTopupStatusFailedByCardNumberSvc<T> {
                        type Response = super::ApiResponseTopupMonthStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindMonthlyTopupStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_monthly_topup_status_failed_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTopupStatusFailedByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindYearlyTopupStatusFailedByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTopupStatusFailedByCardNumberSvc<T: TopupService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupStatusCardNumber>
                    for FindYearlyTopupStatusFailedByCardNumberSvc<T> {
                        type Response = super::ApiResponseTopupYearStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupStatusCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_yearly_topup_status_failed_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTopupStatusFailedByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindMonthlyTopupMethods" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTopupMethodsSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupStatus>
                    for FindMonthlyTopupMethodsSvc<T> {
                        type Response = super::ApiResponseTopupMonthMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_monthly_topup_methods(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTopupMethodsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindYearlyTopupMethods" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTopupMethodsSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupStatus>
                    for FindYearlyTopupMethodsSvc<T> {
                        type Response = super::ApiResponseTopupYearMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_yearly_topup_methods(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTopupMethodsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindMonthlyTopupAmounts" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTopupAmountsSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupStatus>
                    for FindMonthlyTopupAmountsSvc<T> {
                        type Response = super::ApiResponseTopupMonthAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_monthly_topup_amounts(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTopupAmountsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindYearlyTopupAmounts" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTopupAmountsSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupStatus>
                    for FindYearlyTopupAmountsSvc<T> {
                        type Response = super::ApiResponseTopupYearAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_yearly_topup_amounts(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTopupAmountsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindMonthlyTopupMethodsByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTopupMethodsByCardNumberSvc<T: TopupService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupCardNumber>
                    for FindMonthlyTopupMethodsByCardNumberSvc<T> {
                        type Response = super::ApiResponseTopupMonthMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_monthly_topup_methods_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTopupMethodsByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindYearlyTopupMethodsByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTopupMethodsByCardNumberSvc<T: TopupService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupCardNumber>
                    for FindYearlyTopupMethodsByCardNumberSvc<T> {
                        type Response = super::ApiResponseTopupYearMethod;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_yearly_topup_methods_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTopupMethodsByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindMonthlyTopupAmountsByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTopupAmountsByCardNumberSvc<T: TopupService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupCardNumber>
                    for FindMonthlyTopupAmountsByCardNumberSvc<T> {
                        type Response = super::ApiResponseTopupMonthAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_monthly_topup_amounts_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTopupAmountsByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindYearlyTopupAmountsByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTopupAmountsByCardNumberSvc<T: TopupService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindYearTopupCardNumber>
                    for FindYearlyTopupAmountsByCardNumberSvc<T> {
                        type Response = super::ApiResponseTopupYearAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTopupCardNumber>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_yearly_topup_amounts_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTopupAmountsByCardNumberSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindByCardNumberTopup" => {
                    #[allow(non_camel_case_types)]
                    struct FindByCardNumberTopupSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindByCardNumberTopupRequest>
                    for FindByCardNumberTopupSvc<T> {
                        type Response = super::ApiResponsesTopup;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByCardNumberTopupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_by_card_number_topup(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByCardNumberTopupSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindByActive" => {
                    #[allow(non_camel_case_types)]
                    struct FindByActiveSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindAllTopupRequest>
                    for FindByActiveSvc<T> {
                        type Response = super::ApiResponsePaginationTopupDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllTopupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_by_active(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByActiveSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/FindByTrashed" => {
                    #[allow(non_camel_case_types)]
                    struct FindByTrashedSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindAllTopupRequest>
                    for FindByTrashedSvc<T> {
                        type Response = super::ApiResponsePaginationTopupDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllTopupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::find_by_trashed(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByTrashedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/CreateTopup" => {
                    #[allow(non_camel_case_types)]
                    struct CreateTopupSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::CreateTopupRequest>
                    for CreateTopupSvc<T> {
                        type Response = super::ApiResponseTopup;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateTopupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::create_topup(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateTopupSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/UpdateTopup" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateTopupSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::UpdateTopupRequest>
                    for UpdateTopupSvc<T> {
                        type Response = super::ApiResponseTopup;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateTopupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::update_topup(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateTopupSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/TrashedTopup" => {
                    #[allow(non_camel_case_types)]
                    struct TrashedTopupSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindByIdTopupRequest>
                    for TrashedTopupSvc<T> {
                        type Response = super::ApiResponseTopupDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTopupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::trashed_topup(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TrashedTopupSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/RestoreTopup" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreTopupSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindByIdTopupRequest>
                    for RestoreTopupSvc<T> {
                        type Response = super::ApiResponseTopupDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTopupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::restore_topup(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreTopupSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/DeleteTopupPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteTopupPermanentSvc<T: TopupService>(pub Arc<T>);
                    impl<
                        T: TopupService,
                    > tonic::server::UnaryService<super::FindByIdTopupRequest>
                    for DeleteTopupPermanentSvc<T> {
                        type Response = super::ApiResponseTopupDelete;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTopupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::delete_topup_permanent(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteTopupPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/RestoreAllTopup" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreAllTopupSvc<T: TopupService>(pub Arc<T>);
                    impl<T: TopupService> tonic::server::UnaryService<()>
                    for RestoreAllTopupSvc<T> {
                        type Response = super::ApiResponseTopupAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::restore_all_topup(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreAllTopupSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/topup.TopupService/DeleteAllTopupPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteAllTopupPermanentSvc<T: TopupService>(pub Arc<T>);
                    impl<T: TopupService> tonic::server::UnaryService<()>
                    for DeleteAllTopupPermanentSvc<T> {
                        type Response = super::ApiResponseTopupAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TopupService>::delete_all_topup_permanent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteAllTopupPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for TopupServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "topup.TopupService";
    impl<T> tonic::server::NamedService for TopupServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
