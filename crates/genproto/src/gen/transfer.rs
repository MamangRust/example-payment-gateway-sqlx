// This file is @generated by prost-build.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByCardNumberTransferRequest {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearTransferStatus {
    #[prost(int32, tag = "1")]
    pub year: i32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindMonthlyTransferStatus {
    #[prost(int32, tag = "1")]
    pub year: i32,
    #[prost(int32, tag = "2")]
    pub month: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindYearTransferStatusCardNumber {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindMonthlyTransferStatusCardNumber {
    #[prost(string, tag = "1")]
    pub card_number: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub year: i32,
    #[prost(int32, tag = "3")]
    pub month: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindAllTransferRequest {
    #[prost(int32, tag = "1")]
    pub page: i32,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    #[prost(string, tag = "3")]
    pub search: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindByIdTransferRequest {
    #[prost(int32, tag = "1")]
    pub transfer_id: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindTransferByTransferFromRequest {
    #[prost(string, tag = "1")]
    pub transfer_from: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FindTransferByTransferToRequest {
    #[prost(string, tag = "1")]
    pub transfer_to: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CreateTransferRequest {
    #[prost(string, tag = "1")]
    pub transfer_from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub transfer_to: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub transfer_amount: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpdateTransferRequest {
    #[prost(int32, tag = "1")]
    pub transfer_id: i32,
    #[prost(string, tag = "2")]
    pub transfer_from: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub transfer_to: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub transfer_amount: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransferResponse {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub transfer_no: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub transfer_from: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub transfer_to: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub transfer_amount: i64,
    #[prost(string, tag = "6")]
    pub transfer_time: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub updated_at: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransferResponseDeleteAt {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub transfer_no: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub transfer_from: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub transfer_to: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub transfer_amount: i64,
    #[prost(string, tag = "6")]
    pub transfer_time: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransferMonthStatusSuccessResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub month: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_success: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransferYearStatusSuccessResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_success: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransferMonthStatusFailedResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub month: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_failed: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransferYearStatusFailedResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_failed: i32,
    #[prost(int64, tag = "4")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransferMonthAmountResponse {
    #[prost(string, tag = "1")]
    pub month: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TransferYearAmountResponse {
    #[prost(string, tag = "1")]
    pub year: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_amount: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransferMonthStatusSuccess {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransferMonthStatusSuccessResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransferYearStatusSuccess {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransferYearStatusSuccessResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransferMonthStatusFailed {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransferMonthStatusFailedResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransferYearStatusFailed {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransferYearStatusFailedResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransferMonthAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransferMonthAmountResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransferYearAmount {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransferYearAmountResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTransfer {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<TransferResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTransferDeleteAt {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<TransferResponseDeleteAt>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponseTransfers {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransferResponse>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTransferDelete {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApiResponseTransferAll {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationTransfer {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransferResponse>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponsePaginationTransferDeleteAt {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<TransferResponseDeleteAt>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::api::PaginationMeta>,
}
/// Generated client implementations.
pub mod transfer_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct TransferServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TransferServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TransferServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TransferServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TransferServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn find_all_transfer(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransfer>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindAllTransfer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("transfer.TransferService", "FindAllTransfer"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_id_transfer(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransfer>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindByIdTransfer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("transfer.TransferService", "FindByIdTransfer"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_status_success(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindMonthlyTransferStatusSuccess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindMonthlyTransferStatusSuccess",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_status_success(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindYearlyTransferStatusSuccess",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindYearlyTransferStatusSuccess",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_status_failed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindMonthlyTransferStatusFailed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindMonthlyTransferStatusFailed",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_status_failed(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindYearlyTransferStatusFailed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindYearlyTransferStatusFailed",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_status_success_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyTransferStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindMonthlyTransferStatusSuccessByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindMonthlyTransferStatusSuccessByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_status_success_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransferStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearStatusSuccess>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindYearlyTransferStatusSuccessByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindYearlyTransferStatusSuccessByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_status_failed_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindMonthlyTransferStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindMonthlyTransferStatusFailedByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindMonthlyTransferStatusFailedByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_status_failed_by_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransferStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearStatusFailed>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindYearlyTransferStatusFailedByCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindYearlyTransferStatusFailedByCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_amounts(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindMonthlyTransferAmounts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindMonthlyTransferAmounts",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_amounts(
            &mut self,
            request: impl tonic::IntoRequest<super::FindYearTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindYearlyTransferAmounts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindYearlyTransferAmounts",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_amounts_by_sender_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByCardNumberTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindMonthlyTransferAmountsBySenderCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindMonthlyTransferAmountsBySenderCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_monthly_transfer_amounts_by_receiver_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByCardNumberTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindMonthlyTransferAmountsByReceiverCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindMonthlyTransferAmountsByReceiverCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_amounts_by_sender_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByCardNumberTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindYearlyTransferAmountsBySenderCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindYearlyTransferAmountsBySenderCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_yearly_transfer_amounts_by_receiver_card_number(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByCardNumberTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearAmount>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindYearlyTransferAmountsByReceiverCardNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindYearlyTransferAmountsByReceiverCardNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_transfer_by_transfer_from(
            &mut self,
            request: impl tonic::IntoRequest<super::FindTransferByTransferFromRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransfers>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindTransferByTransferFrom",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindTransferByTransferFrom",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_transfer_by_transfer_to(
            &mut self,
            request: impl tonic::IntoRequest<super::FindTransferByTransferToRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransfers>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindTransferByTransferTo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "FindTransferByTransferTo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_active_transfer(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransferDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindByActiveTransfer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("transfer.TransferService", "FindByActiveTransfer"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_by_trashed_transfer(
            &mut self,
            request: impl tonic::IntoRequest<super::FindAllTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransferDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/FindByTrashedTransfer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("transfer.TransferService", "FindByTrashedTransfer"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_transfer(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransfer>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/CreateTransfer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("transfer.TransferService", "CreateTransfer"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_transfer(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransfer>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/UpdateTransfer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("transfer.TransferService", "UpdateTransfer"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn trashed_transfer(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/TrashedTransfer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("transfer.TransferService", "TrashedTransfer"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_transfer(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferDeleteAt>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/RestoreTransfer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("transfer.TransferService", "RestoreTransfer"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_transfer_permanent(
            &mut self,
            request: impl tonic::IntoRequest<super::FindByIdTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferDelete>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/DeleteTransferPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "DeleteTransferPermanent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn restore_all_transfer(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/RestoreAllTransfer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("transfer.TransferService", "RestoreAllTransfer"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_all_transfer_permanent(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferAll>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/transfer.TransferService/DeleteAllTransferPermanent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "transfer.TransferService",
                        "DeleteAllTransferPermanent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod transfer_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TransferServiceServer.
    #[async_trait]
    pub trait TransferService: std::marker::Send + std::marker::Sync + 'static {
        async fn find_all_transfer(
            &self,
            request: tonic::Request<super::FindAllTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransfer>,
            tonic::Status,
        >;
        async fn find_by_id_transfer(
            &self,
            request: tonic::Request<super::FindByIdTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransfer>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_status_success(
            &self,
            request: tonic::Request<super::FindMonthlyTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthStatusSuccess>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_status_success(
            &self,
            request: tonic::Request<super::FindYearTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearStatusSuccess>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_status_failed(
            &self,
            request: tonic::Request<super::FindMonthlyTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthStatusFailed>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_status_failed(
            &self,
            request: tonic::Request<super::FindYearTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearStatusFailed>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_status_success_by_card_number(
            &self,
            request: tonic::Request<super::FindMonthlyTransferStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthStatusSuccess>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_status_success_by_card_number(
            &self,
            request: tonic::Request<super::FindYearTransferStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearStatusSuccess>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_status_failed_by_card_number(
            &self,
            request: tonic::Request<super::FindMonthlyTransferStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthStatusFailed>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_status_failed_by_card_number(
            &self,
            request: tonic::Request<super::FindYearTransferStatusCardNumber>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearStatusFailed>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_amounts(
            &self,
            request: tonic::Request<super::FindYearTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthAmount>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_amounts(
            &self,
            request: tonic::Request<super::FindYearTransferStatus>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearAmount>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_amounts_by_sender_card_number(
            &self,
            request: tonic::Request<super::FindByCardNumberTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthAmount>,
            tonic::Status,
        >;
        async fn find_monthly_transfer_amounts_by_receiver_card_number(
            &self,
            request: tonic::Request<super::FindByCardNumberTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferMonthAmount>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_amounts_by_sender_card_number(
            &self,
            request: tonic::Request<super::FindByCardNumberTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearAmount>,
            tonic::Status,
        >;
        async fn find_yearly_transfer_amounts_by_receiver_card_number(
            &self,
            request: tonic::Request<super::FindByCardNumberTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferYearAmount>,
            tonic::Status,
        >;
        async fn find_transfer_by_transfer_from(
            &self,
            request: tonic::Request<super::FindTransferByTransferFromRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransfers>,
            tonic::Status,
        >;
        async fn find_transfer_by_transfer_to(
            &self,
            request: tonic::Request<super::FindTransferByTransferToRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransfers>,
            tonic::Status,
        >;
        async fn find_by_active_transfer(
            &self,
            request: tonic::Request<super::FindAllTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransferDeleteAt>,
            tonic::Status,
        >;
        async fn find_by_trashed_transfer(
            &self,
            request: tonic::Request<super::FindAllTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponsePaginationTransferDeleteAt>,
            tonic::Status,
        >;
        async fn create_transfer(
            &self,
            request: tonic::Request<super::CreateTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransfer>,
            tonic::Status,
        >;
        async fn update_transfer(
            &self,
            request: tonic::Request<super::UpdateTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransfer>,
            tonic::Status,
        >;
        async fn trashed_transfer(
            &self,
            request: tonic::Request<super::FindByIdTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferDeleteAt>,
            tonic::Status,
        >;
        async fn restore_transfer(
            &self,
            request: tonic::Request<super::FindByIdTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferDeleteAt>,
            tonic::Status,
        >;
        async fn delete_transfer_permanent(
            &self,
            request: tonic::Request<super::FindByIdTransferRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferDelete>,
            tonic::Status,
        >;
        async fn restore_all_transfer(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferAll>,
            tonic::Status,
        >;
        async fn delete_all_transfer_permanent(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::ApiResponseTransferAll>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct TransferServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> TransferServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TransferServiceServer<T>
    where
        T: TransferService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/transfer.TransferService/FindAllTransfer" => {
                    #[allow(non_camel_case_types)]
                    struct FindAllTransferSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindAllTransferRequest>
                    for FindAllTransferSvc<T> {
                        type Response = super::ApiResponsePaginationTransfer;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllTransferRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_all_transfer(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindAllTransferSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindByIdTransfer" => {
                    #[allow(non_camel_case_types)]
                    struct FindByIdTransferSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindByIdTransferRequest>
                    for FindByIdTransferSvc<T> {
                        type Response = super::ApiResponseTransfer;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTransferRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_by_id_transfer(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByIdTransferSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindMonthlyTransferStatusSuccess" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferStatusSuccessSvc<T: TransferService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindMonthlyTransferStatus>
                    for FindMonthlyTransferStatusSuccessSvc<T> {
                        type Response = super::ApiResponseTransferMonthStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindMonthlyTransferStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_monthly_transfer_status_success(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferStatusSuccessSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindYearlyTransferStatusSuccess" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferStatusSuccessSvc<T: TransferService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindYearTransferStatus>
                    for FindYearlyTransferStatusSuccessSvc<T> {
                        type Response = super::ApiResponseTransferYearStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTransferStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_yearly_transfer_status_success(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferStatusSuccessSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindMonthlyTransferStatusFailed" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferStatusFailedSvc<T: TransferService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindMonthlyTransferStatus>
                    for FindMonthlyTransferStatusFailedSvc<T> {
                        type Response = super::ApiResponseTransferMonthStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindMonthlyTransferStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_monthly_transfer_status_failed(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferStatusFailedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindYearlyTransferStatusFailed" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferStatusFailedSvc<T: TransferService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindYearTransferStatus>
                    for FindYearlyTransferStatusFailedSvc<T> {
                        type Response = super::ApiResponseTransferYearStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTransferStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_yearly_transfer_status_failed(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferStatusFailedSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindMonthlyTransferStatusSuccessByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferStatusSuccessByCardNumberSvc<
                        T: TransferService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<
                        super::FindMonthlyTransferStatusCardNumber,
                    > for FindMonthlyTransferStatusSuccessByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransferMonthStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindMonthlyTransferStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_monthly_transfer_status_success_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferStatusSuccessByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindYearlyTransferStatusSuccessByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferStatusSuccessByCardNumberSvc<
                        T: TransferService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<
                        super::FindYearTransferStatusCardNumber,
                    > for FindYearlyTransferStatusSuccessByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransferYearStatusSuccess;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindYearTransferStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_yearly_transfer_status_success_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferStatusSuccessByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindMonthlyTransferStatusFailedByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferStatusFailedByCardNumberSvc<
                        T: TransferService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<
                        super::FindMonthlyTransferStatusCardNumber,
                    > for FindMonthlyTransferStatusFailedByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransferMonthStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindMonthlyTransferStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_monthly_transfer_status_failed_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferStatusFailedByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindYearlyTransferStatusFailedByCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferStatusFailedByCardNumberSvc<
                        T: TransferService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<
                        super::FindYearTransferStatusCardNumber,
                    > for FindYearlyTransferStatusFailedByCardNumberSvc<T> {
                        type Response = super::ApiResponseTransferYearStatusFailed;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindYearTransferStatusCardNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_yearly_transfer_status_failed_by_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferStatusFailedByCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindMonthlyTransferAmounts" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferAmountsSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindYearTransferStatus>
                    for FindMonthlyTransferAmountsSvc<T> {
                        type Response = super::ApiResponseTransferMonthAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTransferStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_monthly_transfer_amounts(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferAmountsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindYearlyTransferAmounts" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferAmountsSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindYearTransferStatus>
                    for FindYearlyTransferAmountsSvc<T> {
                        type Response = super::ApiResponseTransferYearAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindYearTransferStatus>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_yearly_transfer_amounts(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferAmountsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindMonthlyTransferAmountsBySenderCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferAmountsBySenderCardNumberSvc<
                        T: TransferService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindByCardNumberTransferRequest>
                    for FindMonthlyTransferAmountsBySenderCardNumberSvc<T> {
                        type Response = super::ApiResponseTransferMonthAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindByCardNumberTransferRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_monthly_transfer_amounts_by_sender_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferAmountsBySenderCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindMonthlyTransferAmountsByReceiverCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindMonthlyTransferAmountsByReceiverCardNumberSvc<
                        T: TransferService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindByCardNumberTransferRequest>
                    for FindMonthlyTransferAmountsByReceiverCardNumberSvc<T> {
                        type Response = super::ApiResponseTransferMonthAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindByCardNumberTransferRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_monthly_transfer_amounts_by_receiver_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindMonthlyTransferAmountsByReceiverCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindYearlyTransferAmountsBySenderCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferAmountsBySenderCardNumberSvc<
                        T: TransferService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindByCardNumberTransferRequest>
                    for FindYearlyTransferAmountsBySenderCardNumberSvc<T> {
                        type Response = super::ApiResponseTransferYearAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindByCardNumberTransferRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_yearly_transfer_amounts_by_sender_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferAmountsBySenderCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindYearlyTransferAmountsByReceiverCardNumber" => {
                    #[allow(non_camel_case_types)]
                    struct FindYearlyTransferAmountsByReceiverCardNumberSvc<
                        T: TransferService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindByCardNumberTransferRequest>
                    for FindYearlyTransferAmountsByReceiverCardNumberSvc<T> {
                        type Response = super::ApiResponseTransferYearAmount;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindByCardNumberTransferRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_yearly_transfer_amounts_by_receiver_card_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindYearlyTransferAmountsByReceiverCardNumberSvc(
                            inner,
                        );
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindTransferByTransferFrom" => {
                    #[allow(non_camel_case_types)]
                    struct FindTransferByTransferFromSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<
                        super::FindTransferByTransferFromRequest,
                    > for FindTransferByTransferFromSvc<T> {
                        type Response = super::ApiResponseTransfers;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindTransferByTransferFromRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_transfer_by_transfer_from(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindTransferByTransferFromSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindTransferByTransferTo" => {
                    #[allow(non_camel_case_types)]
                    struct FindTransferByTransferToSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindTransferByTransferToRequest>
                    for FindTransferByTransferToSvc<T> {
                        type Response = super::ApiResponseTransfers;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindTransferByTransferToRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_transfer_by_transfer_to(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindTransferByTransferToSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindByActiveTransfer" => {
                    #[allow(non_camel_case_types)]
                    struct FindByActiveTransferSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindAllTransferRequest>
                    for FindByActiveTransferSvc<T> {
                        type Response = super::ApiResponsePaginationTransferDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllTransferRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_by_active_transfer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByActiveTransferSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/FindByTrashedTransfer" => {
                    #[allow(non_camel_case_types)]
                    struct FindByTrashedTransferSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindAllTransferRequest>
                    for FindByTrashedTransferSvc<T> {
                        type Response = super::ApiResponsePaginationTransferDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindAllTransferRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::find_by_trashed_transfer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindByTrashedTransferSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/CreateTransfer" => {
                    #[allow(non_camel_case_types)]
                    struct CreateTransferSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::CreateTransferRequest>
                    for CreateTransferSvc<T> {
                        type Response = super::ApiResponseTransfer;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateTransferRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::create_transfer(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateTransferSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/UpdateTransfer" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateTransferSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::UpdateTransferRequest>
                    for UpdateTransferSvc<T> {
                        type Response = super::ApiResponseTransfer;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateTransferRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::update_transfer(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateTransferSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/TrashedTransfer" => {
                    #[allow(non_camel_case_types)]
                    struct TrashedTransferSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindByIdTransferRequest>
                    for TrashedTransferSvc<T> {
                        type Response = super::ApiResponseTransferDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTransferRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::trashed_transfer(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TrashedTransferSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/RestoreTransfer" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreTransferSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindByIdTransferRequest>
                    for RestoreTransferSvc<T> {
                        type Response = super::ApiResponseTransferDeleteAt;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTransferRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::restore_transfer(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreTransferSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/DeleteTransferPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteTransferPermanentSvc<T: TransferService>(pub Arc<T>);
                    impl<
                        T: TransferService,
                    > tonic::server::UnaryService<super::FindByIdTransferRequest>
                    for DeleteTransferPermanentSvc<T> {
                        type Response = super::ApiResponseTransferDelete;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindByIdTransferRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::delete_transfer_permanent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteTransferPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/RestoreAllTransfer" => {
                    #[allow(non_camel_case_types)]
                    struct RestoreAllTransferSvc<T: TransferService>(pub Arc<T>);
                    impl<T: TransferService> tonic::server::UnaryService<()>
                    for RestoreAllTransferSvc<T> {
                        type Response = super::ApiResponseTransferAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::restore_all_transfer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RestoreAllTransferSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/transfer.TransferService/DeleteAllTransferPermanent" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteAllTransferPermanentSvc<T: TransferService>(pub Arc<T>);
                    impl<T: TransferService> tonic::server::UnaryService<()>
                    for DeleteAllTransferPermanentSvc<T> {
                        type Response = super::ApiResponseTransferAll;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransferService>::delete_all_transfer_permanent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteAllTransferPermanentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for TransferServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "transfer.TransferService";
    impl<T> tonic::server::NamedService for TransferServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
